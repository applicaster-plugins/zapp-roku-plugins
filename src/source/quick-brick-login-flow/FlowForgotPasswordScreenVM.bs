import "pkg:/source/UIBuilder/view/ScreenVM.bs"
import "pkg:/source/lib/ViewUtils.bs"
import "pkg:/source/mixin/KeyboardDialogMixin.bs"

class FlowForgotPasswordScreenVM extends zapp.uib.ScreenVM

  'styles
  public itemForgotSpacings = [10, 45, 52]
  public inputStyle = invalid
  public processButtonStyle = invalid
  public doneButtonStyle = invalid
  public usernamePlaceholderText = ""
  public doneButtonText = ""
  public dialog = invalid

  'state
  public isCredsValid = false
  public isProcessButtonEnabled = false
  public isMainGroupVisible = true
  public isDoneGroupVisible = false
  public usernameButtonType = "textInput"

  public usernameText = ""
  public username = ""

  public errorText = ""
  public isErrorShowing = false

  private providerId = invalid
  private focusIds = ["usernameInput", "processButton"]
  private authTask
  private channelStore
  private showModalView

  'mixin keyboard
  private showKeyboardDialog = zapp.keyboardDialogMixin.showKeyboardDialog
  private _onKeyboardDialogButtonSelected = zapp.keyboardDialogMixin.onKeyboardDialogButtonSelected
  private _closeKeyboardDialog = zapp.keyboardDialogMixin.closeKeyboardDialog
  private setTextFromKeyboard = zapp.keyboardDialogMixin.setTextFromKeyboard

  @inject("appSpecificDialogSettings")
  private appSpecificDialogSettings

  public function new(riversJson)
    super(riversJson, "FlowForgotPasswordScreenVM")

    m.focusId = "usernameInput"
    m.processStyles(m.riversJson.styles)
    m.providerId = "quick-brick-login-flow"

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Overridden
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public override function createContent()
    m.log.info("createContent is overridden in this screen")
  end function

  public override function load() as boolean
    return true
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ styles
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function processStyles(styles)
    m.itemForgotSpacings = zapp.viewUtils.stringToArray(asString(m.riversJson.styles.input_forgot_spacing, "10,45,52"))
    m.usernameText = m.localizations.forgot_password_username_placeholder_text
    m.usernamePlaceholderText = m.usernameText
    m.showModalView = asBoolean(styles.show_modal_view)

    inputStyle = zapp.viewUtils.makeUIBButtonStyle(styles, "general_input", "textInputPlaceholder")

    m.inputStyle = inputStyle
    m.doneButtonText = m.localizations.done_button_text
    m.processButtonStyle = zapp.viewUtils.makeUIBButtonStyle(styles, "button", "custom", m.localizations.forgot_password_button_text)
    m.doneButtonStyle = zapp.viewUtils.makeUIBButtonStyle(styles, "button", "custom", m.localizations.done_button_text)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ callbacks
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function onProcessButtonSelected(value)
    m.log.method("onProcessButtonSelected")

    if not m.isLoading and m.isCredsValid
      m.process()
    else if not m.isCredsValid
      m.errorText = asString(m.localizations.forgot_error_text, "Please enter your email address")
      m.isErrorShowing = true
    else
      m.log.warn("ignoring loging button, while loading")
    end if
  end function

  public function onUsernameButtonSelected(value)
    palette = zapp.viewUtils.getUIBKeyboardDialogPalette(m.riversJson.styles, "keyboard")
    m.showKeyboardDialog("Enter your username", m.username, "onUsernameKeyboardDialogDismissal", false, "login", palette)
  end function

  public function onDoneButtonSelected(value)
    m.log.method("onDoneButtonSelected")
    m.dismiss("success")
  end function

  public function onExitDialogButtonSelected(value)
    m.log.method("onExitDialogButtonSelected")
    m.appSpecificDialogSettings.forgotPasswordDoneDialog = false
    m.closeDialog(m.dialog)
    m.dismiss("success")
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Keyboard dialog
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onUsernameKeyboardDialogDismissal(text)
    m.log.method("onKeyboardDialogDismissal")
    m.setTextFromKeyboard("username", text, false)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ login
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function checkCredsValid()
    m.isCredsValid = m.username <> invalid and m.username.trim() <> ""

    m.isProcessButtonEnabled = m.isCredsValid and not m.isLoading
  end function

  public function process()
    m.log.info("resetting password")

    if m.isCredsValid
      creds = m.createInstance("AuthenticationCredentials")
      creds.username = m.username
      creds.apiUrlLogin = asString(m.riversJson.general.api_url_login)
      creds.apiUrlRegister = asString(m.riversJson.general.api_url_register)
      creds.apiUrlReset = asString(m.riversJson.general.api_url_reset_password)
      creds.apiUrlRefresh = asString(m.riversJson.general.api_url_refresh)

      m.authTask = m.createAuthTask("execForgotPassword", m.providerId, m.onProcessComplete, creds)

      m.isProcessButtonEnabled = false

      m.isLoading = true
      m.errorText = ""
      m.isErrorShowing = false
      m.state = "loading"
    end if
  end function

  public function onProcessComplete(result)
    m.log.method("onProcessComplete", result)

    if result <> invalid and result.state = "valid"
      m.log.info("processed forgotten login succesfully")
      m.isMainGroupVisible = false
      if asBoolean(m.showModalView)
        m.customModalView()
      else
        m.isDoneGroupVisible = true
        m.setFocusId("doneButton")
      end if
    else
      m.state = "ready"
      if result <> invalid and result.message <> invalid
        m.errorText = result.message
      else
        m.errorText = "Unknown error"
      end if
      m.isErrorShowing = true
      m.isProcessButtonEnabled = true
      m.setFocusId("doneButton")
      m.setFocusId("processButton")
    end if

    m.isLoading = false

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ private
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function customModalView()
    m.appSpecificDialogSettings.forgotPasswordDoneDialog = true
    title = asString(m.localizations.done_modal_button_title_text, "Check your email!")
    message = asString(m.localizations.done_modal_message_text, "You will receive an email in a few minutes with instructions on how to reset your password")
    buttonText = asString(m.localizations.done_modal_button_text, "Sign In")
    styles = m.riversJson.styles
    plugin = new zapp.BasePlugin(m.riversJson)

    dialogBackground = asString(styles.modal_background_color)
    overlayBackground = asString(styles.modal_overlay_color)
    buttonXSize = plugin.getIntValue("styles.modal_button_size_x", 1000)
    labelWidth = plugin.getIntValue("styles.modal_title_width", 1200)
    dialogSettings = {
      "modal_background_color": dialogBackground
      "modal_overlay_color": overlayBackground
      "modal_button_size_x": buttonXSize
      "modal_title_width": labelWidth
    }
    mc.setOrAddNodeField(m.appSpecificDialogSettings, "dialogSettings", dialogSettings)

    m.showDialog(title, message, [buttonText])
    m.dialog = m.getInstance("dialogMenu")
    m.observeNodeField(m.dialog, "buttonSelected", m.onExitDialogButtonSelected)
  end function

  function autoPopulateUserInfo()
    m.log.method("autoPopulateUserInfo")

    m.channelStore = m.createSGNode("ChannelStore", invalid, "channelStore", {
      requestedUserData: "email"
    })
    m.observeNodeField(m.channelStore, "userData", m.onGetUserData, "value", true)
    m.channelStore.command = "getUserData"
  end function

  function onGetUserData(data)
    m.log.method("onGetUserData")

    if data <> invalid
      m.setTextFromKeyboard("username", mc.getPath(data, "email", ""))
      m.focusId = "processButton"
    end if

    if m.channelStore.getParent() <> invalid
      m.channelStore.getParent().removeChild(m.channelStore.getParent())
    end if
    m.channelStore = invalid
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Handling
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function isCapturingAnyKeyPress(key, press)
    'do not anyone escape this screen!
    if press and key = "back" and not mc.getPath(m.riversJson, "general.isflowBlocker", true)
      m.dismiss("cancel")
    end if
    return true
  end function

  public function onKeyPressBack() as boolean
    m.log.method("onKeyPressBack", m.focusId)

    m.dismiss("cancel")
    return true
  end function

  public function onKeyPressRight() as boolean

    if m.focusId = "processButton" and m.riversJson.styles.debug_skip_on_right = true
      m.log.warn("skipping debug flag is on")
      m.onProcessComplete(true)
    end if

    return false
  end function

  public function onKeyPressDown() as boolean
    m.log.method("onKeyPressDown", m.focusId)
    if not m.isDoneGroupVisible
      m.setFocusId(mc.collections.getItemAtOffset(m.focusIds, m.focusId, 1))
    end if
    return true
  end function

  public function onKeyPressOptions() as boolean
    m.log.method("onKeyPressOptions", m.focusId)

    m.onUsernameKeyboardDialogDismissal(m.riversJson.styles.debug_username)

    return true
  end function

  public override function onKeyPressUp() as boolean
    m.log.method("onKeyPressUp", m.focusId)
    if not m.isDoneGroupVisible
      m.setFocusId(mc.collections.getItemAtOffset(m.focusIds, m.focusId, -1))
    end if

    return true
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ lifecycle
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onFirstShow()
    super.onFirstShow()
  end function

end class