namespace zapp.tests
  @tags("public", "auth", "vm")
  @suite("QuickBrickAuthenticationFlowScreenVMTests")
  class QuickBrickAuthenticationFlowScreenVMTests extends tests.BaseTestSuite
    private riversJson
    private vm
    private user

    protected override function beforeEach()
      super.beforeEach()

      m.riversJson = {
        "id": "11937f34-a364-4601-a0du3-1dace40fe0ed"
        "styles": {
        }
      }

      m.vm = new QuickBrickAuthenticationFlowScreenVM(m.riversJson)
      m.vm.initialize()

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("constructor")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("constructor")
    function _()
      m.assertEqual(m.vm.focusId, "usernameInput")
      m.assertEqual(m.vm.riversJson, m.riversJson)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onKeyPressBack")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("does not dismiss if subscreen is visible")
    function _()
      m.vm.isSubScreenVisible = true
      m.expectNone(m.vm, "dismiss")

      m.assertTrue(m.vm.onKeyPressBack())

      m.assertEqual(m.vm.focusId, "usernameInput")
    end function

    @it("exits app if no subscreen, not dismissable and focused on username input")
    function _()
      m.vm.isSubScreenVisible = false
      m.vm.focusId = "usernameInput"
      m.expectOnce(m.vm, "getTopField", ["isDismissable"], false)

      m.expectOnce(m.vm, "exitApp", [invalid, true])

      m.assertTrue(m.vm.onKeyPressBack())

      m.assertEqual(m.vm.focusId, "usernameInput")
    end function

    @it("dismisses if dismissable, no subscreen is not visible and focused on username input")
    function _()
      m.vm.isSubScreenVisible = false
      m.vm.focusId = "usernameInput"
      m.expectOnce(m.vm, "getTopField", ["isDismissable"], true)

      m.expectOnce(m.vm, "dismiss", ["cancel"])

      m.assertTrue(m.vm.onKeyPressBack())

      m.assertEqual(m.vm.focusId, "usernameInput")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("load")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("dismisses if login is not required")
    function _()
      m.expectCalled(m.vm.isLoginRequired(), false)
      m.expectCalled(m.vm.dismiss("success"))

      m.expectNotCalled(m.vm.isKeyToSkipSet)
      m.expectNotCalled(m.vm.refreshLogin)

      m.vm.load()
    end function

    @it("dismisses if logged in")
    function _()
      m.expectCalled(m.vm.isLoginRequired(), true)
      m.expectCalled(m.vm.isKeyToSkipSet(), false)
      m.expectCalled(m.vm.isLoggedIn(), true)
      m.expectCalled(m.vm.dismiss("success"))

      m.expectNotCalled(m.vm.refreshLogin)

      m.vm.load()
    end function

    @it("dismisses if isKeyToSkipSet")
    function _()
      m.expectCalled(m.vm.isLoginRequired(), true)
      m.expectCalled(m.vm.isKeyToSkipSet(), true)
      m.expectCalled(m.vm.dismiss("success"))

      m.expectNotCalled(m.vm.isLoggedIn)
      m.expectNotCalled(m.vm.refreshLogin)

      m.vm.load()
    end function

    @it("otherwise refreshes")
    function _()
      m.expectCalled(m.vm.isLoginRequired(), true)
      m.expectCalled(m.vm.isKeyToSkipSet(), false)
      m.expectCalled(m.vm.isLoggedIn(), false)
      m.expectCalled(m.vm.refreshLogin())

      m.expectNotCalled(m.vm.dismiss)

      m.vm.load()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("isLoginRequired")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("returns expected value")
    @params(invalid, { id: "currentItem" }, false, true)
    @params({ json: invalid }, { id: "currentItem" }, false, false)
    @params({ json: { extensions: invalid } }, { id: "currentItem" }, false, false)
    @params({ json: { extensions: { requires_authentication: true } } }, { id: "currentItem" }, false, true)
    @params({ json: { extensions: { requires_authentication: false } } }, { id: "currentItem" }, false, false)
    @params({ json: { extensions: { requires_authentication: false } } }, { id: "currentItem" }, true, false)
    function _(item, currentSelection, getMatchesTypeForItem, isLoginRequired)
      currentItem = { "id": "currentItem" }

      m.expectCalled(m.vm.getInstance("currentSelection", "currentItem"), item)
      m.expectCalled(m.vm.getInstance("currentSelection"), currentSelection)
      m.expectCalled(m.vm.getMatchesTypeForItem(currentItem), getMatchesTypeForItem)

      m.assertEqual(m.vm.isLoginRequired(), isLoginRequired)
    end function

    @it("returns false if currentSelection invalid")
    @params(invalid, invalid, false, true)
    function _(item, currentSelection, getMatchesTypeForItem, isLoginRequired)
      currentItem = { "id": "currentItem" }

      m.expectCalled(m.vm.getInstance("currentSelection", currentItem), item)
      m.expectCalled(m.vm.getInstance("currentSelection"), currentSelection)
      m.expectNotCalled(m.vm.getMatchesTypeForItem)

      m.assertEqual(m.vm.isLoginRequired(), isLoginRequired)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @tags("integration")
    @describe("INTEGRATION tests processLogin")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @beforeEach
    override function integratin_processLogin_beforeEach()
      m.beforeEach()
      mioc.setInstance("constants", { "simulateInAppPurchases": true })
      mioc.setInstance("entitlements", createObject("roSGNode", "SimpleEntitlements"))
      mioc.setInstance("authenticationData", createObject("roSGNode", "AuthenticationData"))
      mioc.setInstance("buildConfig", {})
      m.user = createObject("roSGNode", "user")
      mioc.setInstance("user", m.user)
      mioc.setInstance("plugins", [{
        "identifier": "aws_cognito_auth_plugin",
        "api": {
          "require_startup_execution": false,
          "class_name": "AwsCognitoAuthPlugin",
          "interfaces": ["IAuthProvider"]
        },
        "type": "auth_provider"
        "configuration_json": {
          "host": "SOME_HOST"
          "region": "SOME_REGION"
          "endpoint": "SOME_ENDPOINT"
          "app_client_id": "SOME_CLIENT_ID"
        }
      }])
    end function

    @it("valid creds")
    function _()
      m.vm.isCredsValid = true
      m.vm.usernameText = "SOME_USER@email.com"
      m.vm.password = "SOME_PASSWORD"

      m.expectOnce(m.vm, "createInstance", ["AuthenticationCredentials"], createObject("roSGNode", "AuthenticationCredentials"))

      m.vm.processLogin()

      tests.utils.waitForField(m.vm, "isLoading", 3000, 5)

      m.assertEqual(m.vm.state, "finished")
      m.assertFalse(m.vm.isLoading)
    end function

    @it("processLogin_integration_test_invalid")
    function _()

      m.vm.isCredsValid = true
      m.vm.usernameText = "user"
      m.vm.password = "pass"

      m.expectOnce(m.vm, "createInstance", ["AuthenticationCredentials"], createObject("roSGNode", "AuthenticationCredentials"))

      m.vm.processLogin()

      tests.utils.waitForField(m.vm, "isLoading")

      m.assertEqual(m.vm.state, "ready")
      m.assertFalse(m.vm.isLoading)
      m.assertEqual(m.vm.errorText, "User does not exist.")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("refreshLogin")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("refreshLogin")
    function _()
      authTask = { "id": "authTask" }
      m.vm.providerId = "p"

      m.expectCalled(m.vm.createAuthTask("execLoad", m.vm.providerId, m.vm.onRefreshComplete), authTask)

      m.vm.refreshLogin()

      m.assertEqual(m.vm.authTask, authTask)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onRefreshComplete")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("dismisses on succesful refresh")
    function _()
      m.vm.providerId = "pid"
      m.expectCalled(m.vm.isLoggedIn(), true)
      m.expectCalled(m.vm.dismiss("success"))

      m.vm.isRefreshing = true
      m.vm.isLoading = true
      m.vm.isMainGroupVisible = true

      m.vm.onRefreshComplete({})
    end function

    @it("does not dismiss on refresh failure")
    function _()

      m.vm.isRefreshing = true
      m.vm.isLoading = true
      m.vm.isMainGroupVisible = true

      m.expectCalled(m.vm.isLoggedIn(), false)
      m.expectCalled(m.vm.trackScreen())
      m.expectCalled(m.vm.signalAppLaunchDialog(false))
      m.expectCalled(m.vm.showFirstScreen())
      m.expectNotCalled(m.vm.dismiss)

      m.vm.onRefreshComplete({})

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("performNextAction")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("go to back if action go_back")
    function _()
      m.vm.riversJson = {
        general: {
          login_completion_action: "go_back"
        }
      }
      m.vm.isDisplayedInPrehook = false

      m.expectCalled(m.vm.dismiss("success"))

      m.vm.performNextAction()
    end function

    @it("dismisses if displayed in prehook, regardless of the login completion action")

    @params("go_home")
    @params("bo_back")
    @params("go_to_screen")
    function _(action)
      m.vm.riversJson = {
        general: {
          login_completion_action: action
        }
      }
      m.vm.isDisplayedInPrehook = true

      m.expectCalled(m.vm.dismiss("success"))

      m.vm.performNextAction()
    end function

    @it("go to home screen action is go_home")
    function _()
      m.vm.riversJson = {
        general: {
          login_completion_action: "go_home"
        }
      }
      m.vm.isDisplayedInPrehook = false

      m.expectCalled(m.vm.navigateToHomeScreen())

      m.vm.performNextAction()
    end function

    @it("go to some screen if action is go_to_screen")
    function _()
      m.vm.riversJson = {
        general: {
          login_completion_action: "go_to_screen"
        }
        navigations: {
          id: "someScreenId"
        }
      }
      m.vm.isDisplayedInPrehook = false

      screenId = m.vm.riversJson.navigations.id
      m.expectCalled(m.vm.navigateToScreenById(screenId))

      m.vm.performNextAction()
    end function

  end class
end namespace