namespace zapp.tests
  @nocatch
  @tags("public", "auth", "vm")
  @suite
  class FlowRegisterScreenVMTests extends tests.BaseTestSuite
    private riversJson
    private vm
    private user

    protected override function beforeEach()
      super.beforeEach()
      m.riversJson = {
        "name": "SmallSystemFont"
        "id": "11937f34-a364-4601-a0du3-1dace40fe0ed"
        "styles": {
          "title_text": "#title_text"
          "description_text": "#description_text"
          "optional_text1_text": "#optional_text1_text"
          "optional_text2_text": "#optional_text2_text"
          "login_button_text": "#login_button_text"
          "username_placeholder_text": "#username_placeholder_text"
          "password_placeholder_text": "#password_placeholder_text"
          "title_font_name": "SmallSystemFont"
          "title_font_size": "23"
          "title_color": "#ff0000ff"
          "description_font_name": "SmallSystemFont"
          "description_font_size": "23"
          "description_color": "#ff0000ff"
          "error_font_name": "SmallSystemFont"
          "error_font_size": "23"
          "error_color": "#ff0000ff"
          "optional_text1_font_name": "SmallSystemFont"
          "optional_text1_font_size": "23"
          "optional_text1_color": "#ff0000ff"
          "optional_text2_font_name": "SmallSystemFont"
          "optional_text2_font_size": "23"
          "optional_text2_color": "#ff0000ff"
          "input_font_name": "SmallSystemFont"
          "input_font_size": "23"
          "input_placeholder_font_name": "SmallSystemFont"
          "input_placeholder_font_size": "23"
          "input_color": "#ff0000ff"
          "input_highlighted_font_name": "SmallSystemFont"
          "input_highlighted_font_size": "23"
          "input_highlighted_color": "#ff0000ff"
          "login_button_font_name": "SmallSystemFont"
          "login_button_font_size": "23"
          "login_button_color": "#ff0000ff"
          "login_button_background_color": "#ff0000ff"
          "login_button_highlighted_font_name": "SmallSystemFont"
          "login_button_highlighted_font_size": "23"
          "login_button_highlighted_color": "#ff0000ff"
          "login_button_highlighted_background_color": "#ff0000ff"
          "input_color": "#ff0000ff"
          "input_placeholder_color": "#ff0000ff"
          "background_color": "#ff0000ff"
        }
        "general": {
          "api_url_reset_password": "",
          "login_completion_action": "go_home",
          "api_url_refresh": "",
          "identifier": "",
          "enable_marketing": true,
          "login_endpoint": "",
          "intro_external_url": "",
          "show_register_button_on_login_screen": true,
          "terms_external_url": "",
          "api_url_login": "",
          "enable_first_name": true,
          "show_register_screen_first": true,
          "api_url_register": "",
          "navigate_to_login_screen": "",
          "enable_last_name": true,
          "show_hook_once": false,
          "show_login_button_on_register_screen": true,
          "enable_tou": true
        }
      }

      m.vm = new FlowRegisterScreenVM(m.riversJson)
      m.vm.initialize()

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("constructor")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("constructor")
    function _()
      m.assertEqual(m.vm.focusId, "usernameInput")
      m.assertEqual(m.vm.riversJson, m.riversJson)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onLoginButtonSelected")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("create subScreen on login button press")
    function _()
      m.vm.isShowingLoginScreen = true
      screen = { "id": "screen" }

      m.expectCalled(m.vm.createSubScreen("FlowLoginScreen"), screen)
      m.expectCalled(m.vm.toggleSubScreen(screen))

      m.vm.onLoginButtonSelected()

      m.assertTrue(m.vm.isShowingLoginScreen)
      m.assertNotInvalid(screen)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onRegisterButtonSelected")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


    @it("call process when creds are valid")
    function _()
      m.vm.isLoading = false
      m.vm.isCredsValid = true

      m.expectOnce(m.vm, "register")

      m.vm.onRegisterButtonSelected(true)
    end function


    @it("shows error when creds are invalid")
    function _()
      m.vm.isLoading = false
      m.vm.isCredsValid = false
      m.expectNone(m.vm, "register")

      m.vm.onRegisterButtonSelected(true)

      m.assertTrue(m.vm.isErrorShowing)
      m.assertEqual(m.vm.errorText, "Please enter your email address and password")

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onUsernameButtonSelected")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("onUsernameButtonSelected")
    @params("", "")
    @params("other", "other")
    function _(text, expectedText)
      m.vm.username = text

      m.expectOnce(m.vm, "showKeyboardDialog", ["Enter your username", expectedText, "onUsernameKeyboardDialogDismissal", false, "register", m.ignoreValue])

      m.vm.onUsernameButtonSelected(true)

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onPasswordButtonSelected")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("onPasswordButtonSelected")
    @params("", "")
    @params("other", "other")
    function _(text, expectedText)
      m.vm.password = text

      m.expectOnce(m.vm, "showKeyboardDialog", ["Enter your password", expectedText, "onPasswordKeyboardDialogDismissal", true, "none", m.ignoreValue])

      m.vm.onPasswordButtonSelected(true)

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onUsernameKeyboardDialogDismissal")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("uses keyboard helper to set text")
    function _()
      m.vm.onUsernameKeyboardDialogDismissal("george@foo.bar")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onNameKeyboardDialogDismissal")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("uses keyboard helper to set text")
    function _()
      m.expectOnce(m.vm, "setTextFromKeyboard", ["humanName", "name"])

      m.vm.onNameKeyboardDialogDismissal("name")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onPasswordKeyboardDialogDismissal")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("uses keyboard helper to set text")
    function _()

      m.expectOnce(m.vm, "setTextFromKeyboard", ["password", "p", true])

      m.vm.onPasswordKeyboardDialogDismissal("p")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onKeyPressUp")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("onKeyPressUp")
    @params("usernameInput", "usernameInput")
    @params("nameInput", "usernameInput")
    @params("passwordInput", "nameInput")
    @params("registerButton", "passwordInput")
    function _(focusId, expectedFocusId)
      m.vm.focusId = focusId
      m.vm.isNameFieldVisible = true
      m.vm.updateFocusControls()

      m.assertTrue(m.vm.onKeyPressUp())
      m.assertEqual(m.vm.focusId, expectedFocusId)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("updateFocusControls")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("includes name input if isNameFieldVisible is true")
    function _()
      m.vm.isNameFieldVisible = true
      m.vm.updateFocusControls()

      m.assertEqual(m.vm.focusIds, ["usernameInput", "nameInput", "passwordInput", "registerButton"])

    end function


    @it("excludes name input if isNameFieldVisible is false")
    function _()
      m.vm.isNameFieldVisible = false
      m.vm.updateFocusControls()

      m.assertEqual(m.vm.focusIds, ["usernameInput", "passwordInput", "registerButton"])

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onKeyPressDown")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("onKeyPressDown")
    @params("usernameInput", "nameInput")
    @params("nameInput", "passwordInput")
    @params("passwordInput", "registerButton")
    @params("registerButton", "registerButton")
    function _(focusId, expectedFocusId)
      m.vm.focusId = focusId
      m.vm.isNameFieldVisible = true
      m.vm.updateFocusControls()
      m.assertTrue(m.vm.onKeyPressDown())
      m.assertEqual(m.vm.focusId, expectedFocusId)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onKeyPressBack")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("dismisses")
    function _()
      m.vm.focusId = "usernameInput"
      m.expectOnce(m.vm, "dismiss", ["cancel"])

      m.assertTrue(m.vm.onKeyPressBack())
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("checkCredsValid")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("checkCredsValid")
    @params("", invalid, invalid, false)
    @params("", "", "", false)
    @params("", "   ", "   ", false)
    @params("", "valid", "", false)
    @params("", "valid", "   ", false)
    @params(invalid, invalid, "valid", false)
    @params(invalid, "", "valid", false)
    @params(invalid, "  ", "valid", false)
    @params(invalid, invalid, invalid, false)
    @params("name", "", "", false)
    @params("name", "   ", "   ", false)
    @params("name", "valid", "", false)
    @params("name", "valid", "   ", false)
    @params("name", invalid, "valid", false)
    @params("name", "", "valid", false)
    @params("name", "  ", "valid", false)
    @params("name", "valid", "valid", true)
    function _(name, username, password, expectedValue)
      m.vm.usernameText = username
      m.vm.password = password
      m.vm.humanNameText = name

      m.vm.checkCredsValid()

      m.assertEqual(m.vm.isCredsValid, expectedValue)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("register")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("invalid creds")
    function _()
      m.vm.isCredsValid = false

      m.expectNone(m.vm, "createInstance")
      m.expectNone(m.vm, "createAuthTask")

      m.vm.register()

      m.assertFalse(m.vm.isLoading)

    end function

    @it("starts auth task if creds are valid")
    function _()
      m.vm.isCredsValid = true
      m.vm.usernameText = "user"
      m.vm.humanNameText = "name"
      m.vm.password = "pass"
      m.vm.providerId = "p"

      authTask = { "id": "authTask" }
      creds = { "id": "creds" }

      m.expectOnce(m.vm, "createAuthTask", ["execRegister", "p", m.vm.onRegisterComplete, creds], authTask)
      m.expectOnce(m.vm, "createInstance", ["AuthenticationCredentials"], creds)

      m.vm.register()

      m.assertEqual(m.vm.authTask, authTask)

      m.assertEqual(creds.username, "user")
      m.assertEqual(creds.password, "pass")
      m.assertEqual(m.vm.state, "loading")

      m.assertTrue(m.vm.isLoading)
      m.assertFalse(m.vm.isRegisterButtonEnabled)
      m.assertFalse(m.vm.isErrorShowing)
      m.assertEmpty(m.vm.errorText)
    end function

    @ignore("- only use these with your own creds, and for non suit tests")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @tags("integration")
    @describe("INTEGRATION tests register")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @beforeEach
    function integration_beforeEach()
      m.beforeEach()
      m.user = createObject("roSGNode", "user")
      mioc.setInstance("constants", { "simulateInAppPurchases": true })
      mioc.setInstance("entitlements", createObject("roSGNode", "SimpleEntitlements"))
      mioc.setInstance("authenticationData", createObject("roSGNode", "AuthenticationData"))
      mioc.setInstance("buildConfig", {})
      mioc.setInstance("user", m.user)
      mioc.setInstance("plugins", [{
        "identifier": "aws_cognito_auth_plugin",
        "api": {
          "require_startup_execution": false,
          "class_name": "AwsCognitoAuthPlugin",
          "interfaces": ["IAuthProvider"]
        },
        "type": "auth_provider"
        "configuration_json": {
          "host": "SOME_HOST"
          "region": "SOME_REGION"
          "endpoint": "SOME_ENDPOINT"
          "app_client_id": "SOME_CLIENT_ID"
        }
      }])

    end function

    @it("valid creds")
    function _()
      m.vm.isCredsValid = true
      m.vm.usernameText = "SOME_USER@email.com"
      m.vm.password = "SOME_PASSWORD"

      m.expectOnce(m.vm, "createInstance", ["AuthenticationCredentials"], createObject("roSGNode", "AuthenticationCredentials"))

      m.vm.register()

      tests.utils.waitForField(m.vm, "isLoading", 3000, 5)

      m.assertEqual(m.vm.state, "finished")
      m.assertFalse(m.vm.isLoading)
    end function

    @it("register_integration_test_invalid")
    function _()

      m.vm.isCredsValid = true
      m.vm.usernameText = "user"
      m.vm.password = "pass"

      m.expectOnce(m.vm, "createInstance", ["AuthenticationCredentials"], createObject("roSGNode", "AuthenticationCredentials"))

      m.vm.register()

      tests.utils.waitForField(m.vm, "isLoading")

      m.assertEqual(m.vm.state, "ready")
      m.assertFalse(m.vm.isLoading)
      m.assertEqual(m.vm.errorText, "User does not exist.")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onRegisterComplete")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("dismisses when valid")
    function _()
      m.vm.state = "loading"
      m.expectOnce(m.vm, "dismiss", ["success"])

      m.vm.onRegisterComplete({ "state": "valid" })

      m.assertFalse(m.vm.isLoading)

    end function

    @it("does not dismiss on error")
    @params(invalid, "Unknown error")
    @params({}, "Unknown error")
    @params({ "state": "error" }, "Unknown error")
    @params({ "state": "error", "message": "m" }, "m")
    function _(result, expectedMessage)
      m.vm.state = "loading"
      m.expectNone(m.vm, "dismiss")
      m.expectOnce(m.vm, "setFocus", invalid)

      m.vm.onRegisterComplete(result)

      m.assertFalse(m.vm.isLoading)
      m.assertEqual(m.vm.state, "ready")
      m.assertEqual(m.vm.errorText, expectedMessage)
      m.assertTrue(m.vm.isErrorShowing)
      m.assertTrue(m.vm.isRegisterButtonEnabled)

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("autoPopulateUserInfo")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("creates channel store and requests data")
    function _()
      channelStore = { "id": "channelStore" }
      m.expectOnce(m.vm, "createSGNode", ["ChannelStore", invalid, "channelStore", {
          requestedUserData: "email,firstname,lastname"
      }], channelStore)

      m.expectOnce(m.vm, "observeNodeField", [channelStore, "userData", m.vm.onGetUserData, "value", true])

      m.vm.autoPopulateUserInfo()
    end function


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onGetUserData")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("populates text fields if set")
    @params("", "", "", "")
    @params("e", "f", "", "f")
    @params("e", "", "s", "s")
    @params("e", "f", "s", "f s")
    function _(email, name, lastname, expectedFullname)
      m.vm.channelStore = {
        id: "channelStore"
      }
      m.expectOnce(m.vm, "setTextFromKeyboard", ["username", email])
      m.expectOnce(m.vm, "setTextFromKeyboard", ["humanName", expectedFullname])

      parent = { "id": "parent" }
      m.expect(m.vm.channelStore, "getParent", 3, [], parent)
      m.expectOnce(parent, "removeChild")

      data = {
        email: email
        firstname: name
        lastname: lastname
      }

      m.vm.onGetUserData(data)

      m.assertEqual(m.vm.focusId, "passwordInput")


    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onFirstShow")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("autopopulates the register fields")
    function _()
      'from super
      m.stub(m.vm, "sendLaunchBeacon")
      m.stub(m.vm, "load")

      m.expectOnce(m.vm, "autoPopulateUserInfo", [])

      m.vm.onFirstShow()
    end function
  end class
end namespace