import "pkg:/source/authorization/BaseAuthPlugin.bs"
import "pkg:/source/lib/Request.bs"
import "pkg:/source/lib/URI.bs"
import "pkg:/source/authorization/JWTUtil.bs"
import "pkg:/source/authorization/BaseAuthPlugin.bs"

class ZGigyaAuthPlugin extends zapp.auth.BaseAuthPlugin

  public baseUrl = ""

  @injectClass("zapp.Request")
  private request

  public function new(plugin)
    super("ZGigyaAuthPlugin", plugin)
    m.baseUrl = plugin.getStringValue("base_url")
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Overridden
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public override function _getAccountInfo()
    return {
      id: m.authData.rawAuthData.uid
      email: "anonymous@anon.com"
      username: m.authData.rawAuthData.firstName
      regCode: mc.getPath(m.authData, "rawAuthData.regcode")
    }
  end function

  public override function _verify()
    m.log.method("_verify")

    if not m.isAuthDataExpired()
      return m.authData
    end if

    return m.createErrorResult("Invalid token for verification")
  end function

  public override function _regcode()
    m.log.method("_regcode")

    constants = m.getInstance("constants")
    url = m.baseUrl + "CreateDevice"

    params = { "deviceId": constants.applicasterdeviceid, "deviceType": "src-gigya-OOTV-roku" }
    headers = { "Accept": "application/json", "Content-Type": "application/json" }
    response = m.request.post(url, params, headers)

    if response <> invalid and response.devicePinCode <> invalid
      m.log.info("succesfully got code", response.devicePinCode)
      'store in session store; so we can use it in the get call later
      m.setSessionStoreValue(m.id, "regcode", response.devicePinCode)
      return m.createRegCodeResult(response.devicePinCode)
    else
      m.log.error("received illegal regcode", response)
      m.setSessionStoreValue(m.id, "regcode", invalid)
      return m.createRegCodeResult(invalid, -1, "could not retrieve regcode")
    end if

  end function

  public override function _poll()
    m.log.method("_poll")
    pinCode = m.getSessionStoreValue(m.id, "regcode")
    url = m.baseUrl + "GetDeviceByPin/" + pinCode
    response = m.request.getJsonSync(url)

    if response <> invalid

      if response.access_token <> invalid
        token = response.access_token
        response.regCode = pinCode
        expiresIn = 99999 ' TODO where do we get this from?
        'TODO - double check these values
        'Especially result and if we need to manipulate parsed.expires
        return m.createAuthData("valid", token, token, token, response, expiresIn)
      else

        if response.ErrorCode <> invalid
          error = response.ErrorCode
        else
          error = "Unknown error"
        end if

        result = m.createErrorResult(error)
        'it's not an actula error
        result.state = "none"
        return result
      end if
    end if

    return m.createErrorResult("could not complete poll")
  end function

  public override function _logOut()
    m.log.method("_logOut")

    url = m.baseUrl + "Logout"

    if m.authData <> invalid
      params = { "access_token": m.authData.access_token }
      request = m.request.post(url, params)

      if request.response = invalid or request.response.code = invalid or request.response.code <> 204
        m.log.error("error logging out")
      end if
    end if
    return m.createAuthData()
  end function

end class
