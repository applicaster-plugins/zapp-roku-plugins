namespace zapp.tests
  @tags("public", "auth", "vm")
  @suite

  class LogoutScreenVmTests extends tests.BaseTestSuite
    private riversJson
    private vm

    protected override function beforeEach()
      super.beforeEach()
      mioc.setInstances({
        "user": { "isLoggedIn": false }
        "locale": "en"
      })

      m.riversJson = {
        "id": "logoutscreen"
        styles: {
          text_w: 300
          text_x: 20
          text_y: 600
          button_x: 700
          button_y: 400
        }
      }

      m.vm = new LogoutScreenVM(m.riversJson)
      m.vm.initialize()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("constructor")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("constructor")
    function _()
      m.assertEqual(m.vm.riversJson, m.riversJson)
      m.assertEqual(m.vm.textPosition, [20, 600])
      m.assertEqual(m.vm.textWidth, 300)
      m.assertEqual(m.vm.buttonPosition, [700, 400])
    end function


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onLogoutButtonSelected")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("not logged out yet")
    function _()
      m.expectOnce(m.vm, "logout", [])
      m.expectNone(m.vm, "restartApp")

      m.vm.onLogoutButtonSelected(true)
    end function

    @it("logged out")
    function _()
      m.vm.isLoggedOut = true

      m.expectNone(m.vm, "logout")
      m.expectOnce(m.vm, "restartApp", [])

      m.vm.onLogoutButtonSelected(true)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("logout")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("all providers")
    function _()
      authTask = { "id": "authTask" }

      analyticsManager = { "id": "analyticsManager" }
      m.expectOnce(analyticsManager, "callFunc", ["trackEvent", "Signed Out", "page_loaded", { "provider": "AdobeAccessEnabler" }])

      m.expectOnce(m.vm, "getSessionStoreValue", [zapp.pipes.Namespaces.default, "default_auth_plugin_id"], "AdobeAccessEnabler")

      m.expectOnce(m.vm, "getInstance", ["analyticsManager"], analyticsManager)

      m.expectOnce(m.vm, "createAuthTask", ["execLogOutAll", invalid, m.vm.onLogoutComplete], authTask)

      m.vm.logout()

      m.assertEqual(m.vm.authTask, authTask)

      m.assertTrue(m.vm.isLoggedOut)
      m.assertTrue(m.vm.isShowingLoadingIndicator)
      m.assertFalse(m.vm.isButtonVisible)
    end function

    @it("specific providers")
    @params("id1")
    @params("id2")
    function _(providerId)
      authTask = { "id": "authTask" }

      analyticsManager = { "id": "analyticsManager" }
      m.expectOnce(analyticsManager, "callFunc", ["trackEvent", "Signed Out", "page_loaded", { "provider": providerId }])

      m.expectNone(m.vm, "getSessionStoreValue")

      m.expectOnce(m.vm, "getInstance", ["analyticsManager"], analyticsManager)

      m.expectOnce(m.vm, "createAUthTask", ["execLogOut", providerId, m.vm.onLogoutComplete], authTask)
      m.vm.providerId = providerId

      m.vm.logout()

      m.assertEqual(m.vm.authTask, authTask)

      m.assertTrue(m.vm.isLoggedOut)
      m.assertTrue(m.vm.isShowingLoadingIndicator)
      m.assertFalse(m.vm.isButtonVisible)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onKeyPressBack")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("not signing out")
    function _()

      m.expectOnce(m.vm, "pop", [])
      m.vm.onKeyPressBack()

    end function

    @it("signing out")
    function _()
      m.vm.isLoggedOut = true

      m.expectNone(m.vm, "pop")
      m.vm.onKeyPressBack()

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onLogoutComplete")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


    @it("onLogoutComplete")
    function _()

      m.expectOnce(m.vm, "setFocus")

      m.vm.signedOutButtonText = "ok"
      m.vm.signedOutTitle = "title"
      m.vm.onLogoutComplete({ isOK: true })

      m.assertFalse(m.vm.isShowingLoadingIndicator)
      m.assertTrue(m.vm.isButtonVisible)
      m.assertEqual(m.vm.buttonText, "ok")
      m.assertEqual(m.vm.titleText, "title")
    end function

  end class
end namespace