'/* cspell:disable */
namespace zapp.plugins.tests
  @tags("core", "auth", "cleeng")
  @suite
  class QuickBrickEpgScreenVMTests extends tests.BaseTestSuite

    private user
    private plugin
    private vm

    private constants = {
      "deviceInfo": {
        "modelName": "mn"
        "model": "md"
        "version": "ver"
        "userAgent": "ua"
        "uiResolution": {
          "width": 100
          "height": 100
        }
      }
      "applicasterDeviceId": "adid"
    }

    protected override function beforeEach()
      super.beforeEach()

      pluginJson = {
        "geo_is_enabled": true
        "geo_countries_list": ["US", "ES"]
        "geo_layout": "B4567"
        "experiment_is_enabled": true
        "experiment_id": "exId"
        "styles": {
          "cell": "cell"
        }
        "json": {
          "configuration_json": {
            "localizations": {
              "en": {}
            }
          }
        }
      }
      cellStyles = {
        "styleIdsByKey": {}
      }
      mioc.setInstance("cellStyles", cellStyles)
      mioc.setInstance("languageCode", "en")

      m.plugin = new zapp.BasePlugin(tests.utils.createPluginJson("quick-brick-epg-screen", pluginJson))

      m.vm = new QuickBrickEpgScreenVM(pluginJson)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("setEpgContent")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("set epg content")
    function _()
      data = {
        "channels_source": {
          "source": "sourceUrl"
        }
      }

      m.expectCalled(m.vm.executeloadTaskWithUrl("1", m.vm.onLoadMoreResponse, "sourceUrl", 0), "data")

      m.vm.setEpgContent(data)

      m.assertEqual(m.vm.state, "loading")
      m.assertNotEmpty(m.vm.loadChannelTask)
    end function

    @it("do nothing if source is empty")
    function _()
      data = {
        "channels_source": {
          "source": ""
        }
      }

      m.expectNotCalled(m.vm.executeloadTaskWithUrl)

      m.vm.setEpgContent(data)

      m.assertNotEqual(m.vm.state, "loading")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onSelectedIndexChangeMenu")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("do nothing if item is invalid")
    function _()
      m.vm.menuButtons = []

      m.expectNotCalled(m.vm.setIsoTime)
      m.expectNotCalled(m.vm.setEpgContent)

      m.vm.onSelectedIndexChangeMenu(0)
    end function

    @it("do nothing if programState is not ready")
    function _()
      m.vm.riversJsonData = {
        "data": "riversData"
      }

      m.vm.menuButtons = [
        {
          "id": "0"
          "title": "title"
          "index": 0
        }
      ]
      m.vm.taskCount = 0
      m.vm.programState = "invalid"


      m.expectNotCalled(m.vm.setIsoTime)
      m.expectNotCalled(m.vm.setEpgContent)

      m.vm.onSelectedIndexChangeMenu(0)
    end function

    @it("set iso time and load epg content on target day")
    function _()
      m.vm.riversJsonData = {
        "data": "riversData"
      }

      m.vm.menuButtons = [
        {
          "id": "0"
          "title": "title"
          "index": 0
        }
      ]
      m.vm.taskCount = 0
      m.vm.programState = "ready"
      dayDifference = 0
      currentTime = CreateObject("roDateTime")
      timezone = currentTime.GetTimeZoneOffset() * 60
      hours = currentTime.GetHours() * 3600
      minutes = currentTime.GetMinutes() * 60

      currentDayIndex = currentTime.getDayOfWeek()
      targetTime = currentTime.asSeconds() + (86400 * dayDifference) - hours - minutes + timezone

      m.expectCalled(m.vm.dayDiffernceCalculation(0, currentDayIndex, m.vm.menuButtons[0]), dayDifference)
      m.expectCalled(m.vm.setIsoTime(targetTime))
      m.expectCalled(m.vm.setEpgContent("riversData"))

      m.vm.onSelectedIndexChangeMenu(0)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getLocalizeButtonText")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("return Localized text if he is valid")
    @params("p1", "t1", "s1", "t1")
    @params("p1", "t1", "", "t1")
    @params("p1", "", "s1", "s1")
    @params("p1", invalid, "s1", "s1")
    @params("p1", invalid, invalid, invalid)
    function _(prefix, localizedText, styleText, expectedText)

      m.vm.localizations = {}
      m.vm.localizations[prefix] = localizedText
      m.vm.riversJson.styles = {}
      m.vm.riversJson.styles[prefix] = styleText

      m.assertEqual(m.vm.getLocalizeButtonText(prefix), expectedText)
    end function

    @it("return empty string if localizations is invalid")
    function _()
      m.vm.localizations = invalid
      prefix = "buttons"
      m.assertEqual(m.vm.getLocalizeButtonText(prefix), "")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onLoadMoreResponse")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("Load More Response if data is valid")
    function _()
      result = {
        "isOk": true
      }
      m.vm.onLoadMoreResponse(result)

      m.assertEqual(m.vm.state, "ready")
    end function

    @it("state error on invalid result")
    function _()
      result = {
        "isOk": false
        "data": {
        }
      }
      m.vm.onLoadMoreResponse(result)

      m.assertEqual(m.vm.state, "error")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onLoadProgramsResponse")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("Load More Response if data is valid")
    function _()
      m.vm.timeGrid = { "id": "timeGrid", "numRows": 1 }
      m.vm.isNowNextMode = false
      m.vm.programState = "loading"
      m.vm.isUsingButtons = true
      m.vm.channelCount = -1
      m.vm.taskCount = 1
      m.vm.riversJsonData = {
        "styles": {
          "label1_text_transform": "capitalize"
        }
      }
      m.vm.timeGridContent = mc.createSGNode("ZPEntry")
      m.vm.channelItem = mc.createSGNode("ZPEntry", m.vm.timeGridContent, "ca")

      feed = mc.createSGNode("ZPEntry")
      ca = mc.createSGNode("ZPEntry", feed, "ca")
      cb = mc.createSGNode("ZPEntry", feed, "cb")

      result = {
        "isOk": true
        "data": feed
      }

      ca.title = "lower Case"
      ca.json = {
        "extensions": {
          "start_time": 0,
          "end_time": 0
        }
      }

      cb.title = "upper case"
      cb.json = {
        "title": "upper case"
        "extensions": {
          "start_time": 0,
          "end_time": 0
        }
      }

      m.expectCalled(m.vm.parseDateStringToSeconds(0), 0)
      m.expectCalled(m.vm.parseDateStringToSeconds(0), 0)
      m.expectCalled(m.vm.parseDateStringToSeconds(0), 0)
      m.expectCalled(m.vm.parseDateStringToSeconds(0), 0)
      m.expectCalled(m.vm.parseDateStringToSeconds(0), 0)
      m.expectCalled(m.vm.parseDateStringToSeconds(0), 0)
      m.expectCalled(m.vm.setNowBarIndicatorPosition())

      m.expectCalled(m.vm.createCustomItems())
      m.expectCalled(m.vm.updateMenuItems())

      m.vm.onLoadProgramsResponse(result)

      m.assertEqual(m.vm.state, "ready")
      m.assertEqual(m.vm.programsData[0].title, "Lower case")
      m.assertEqual(m.vm.programsData[1].title, "Upper case")
    end function

    @it("state error on invalid result")
    function _()
      m.vm.channelCount = 0
      m.vm.taskCount = 1
      m.vm.isUsingButtons = true
      m.vm.programState = "loading"
      m.vm.isNowNextMode = false
      m.vm.timeGrid = { "id": "timeGrid", "numRows": 1 }
      m.vm.timeGridContent = mc.createSGNode("ZPEntry")
      m.vm.channelItem = mc.createSGNode("ZPEntry", m.vm.timeGridContent, "ca")

      result = {
        "isOk": false
        "data": {
        }
      }

      m.expectCalled(m.vm.setNowBarIndicatorPosition())
      m.expectCalled(m.vm.createCustomItems())
      m.expectCalled(m.vm.updateMenuItems())

      m.vm.onLoadProgramsResponse(result)

      m.assertEqual(m.vm.state, "ready")
      m.assertEqual(m.vm.programState, "ready")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onLeftEdgeTargetTime")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("do nothing if data is invalid")
    function _()
      currentTime = CreateObject("roDateTime").asSeconds()
      m.vm.timeGrid = { "id": "timeGrid", "numRows": 1 }

      m.expectCalled(m.vm.checkIndicatorVisibleOnLeftEdgeChange(currentTime))

      m.vm.onLeftEdgeTargetTime()
    end function

    @it("do nothing if channel data is invalid")
    function _()
      currentTime = CreateObject("roDateTime").asSeconds()
      m.vm.timeGrid = { "id": "timeGrid", "numRows": 1 }
      m.vm.timeGrid.content = mc.createSGNode("ZPEntry")
      ca = mc.createSGNode("ZPEntry", m.vm.timeGrid.content, "ca")
      cb = mc.createSGNode("ZPEntry", m.vm.timeGrid.content, "cb")

      m.expectCalled(m.vm.checkIndicatorVisibleOnLeftEdgeChange(currentTime))

      m.vm.onLeftEdgeTargetTime()
    end function

    @it("do nothing if playStart is invalid")
    function _()
      currentTime = CreateObject("roDateTime").asSeconds()
      m.vm.timeGrid = { "id": "timeGrid", "numRows": 1 }
      m.vm.timeGrid.content = mc.createSGNode("ZPEntry")
      ca = mc.createSGNode("ZPEntry", m.vm.timeGrid.content, "ca")
      cb = mc.createSGNode("ZPEntry", m.vm.timeGrid.content, "cb")

      m.expectCalled(m.vm.checkIndicatorVisibleOnLeftEdgeChange(currentTime))

      m.vm.onLeftEdgeTargetTime()
    end function

    @it("set live poster on Correct time")
    function _()
      m.vm.liveAsset = "liveAsset"
      m.vm.timeGrid = { "id": "timeGrid", "numRows": 1 }
      m.vm.timeGrid.content = mc.createSGNode("ZPEntry")
      ca = mc.createSGNode("ZPEntry", m.vm.timeGrid.content, "ca")
      cb = mc.createSGNode("ZPEntry", m.vm.timeGrid.content, "cb")
      pa = mc.createSGNode("ZPEntry", ca, "ca")
      pb = mc.createSGNode("ZPEntry", cb, "cb")

      currentTime = CreateObject("roDateTime").asSeconds()

      pa.playStart = currentTime - 100
      pa.playDuration = 200

      m.expectCalled(m.vm.checkIndicatorVisibleOnLeftEdgeChange(currentTime))

      m.vm.onLeftEdgeTargetTime()

      m.assertEqual(m.vm.timeGrid.content.getChild(0).getchild(0).HDSMALLICONURL, m.vm.liveAsset)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("checkIndicatorVisibleOnLeftEdgeChange")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("set indicator visible true on left edge change")
    function _()
      edgeTime = 200

      m.vm.currentTimeGridLeftEdgeTime = edgeTime
      m.vm.indicatorVisible = false
      m.vm.TimeGrid = { "leftEdgeTargetTime": edgeTime }

      m.expectCalled(m.vm.setNowBarIndicatorPosition())

      m.vm.checkIndicatorVisibleOnLeftEdgeChange(500)

      m.assertEqual(m.vm.currentTimeGridLeftEdgeTime, edgeTime)
      m.assertEqual(m.vm.indicatorVisible, true)
    end function

    @it("set indicator visible false on left edge change")
    function _()
      edgeTime = 600

      m.vm.currentTimeGridLeftEdgeTime = edgeTime
      m.vm.indicatorVisible = false
      m.vm.TimeGrid = { "leftEdgeTargetTime": edgeTime }

      m.expectNotCalled(m.vm.setNowBarIndicatorPosition)

      m.vm.checkIndicatorVisibleOnLeftEdgeChange(500)

      m.assertEqual(m.vm.currentTimeGridLeftEdgeTime, edgeTime)
      m.assertEqual(m.vm.indicatorVisible, false)
    end function


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("epgHardcodedStyle")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("return epg style")
    function _()
      m.vm.plugin = {
        "id": "pluginId",
        "json": {
          "configuration_json": {
          }
        }
      }
      style = {
        "style": "style"
      }
      m.vm.timeGrid = { "id": "timeGrid" }

      m.expectCalled(m.vm.getMField("TimeGridGroup"), {})
      m.expectCalled(m.vm.defaultValues(m.vm.timeGrid, m.vm.plugin, style))
      m.expectCalled(m.vm.timeGridOverallSettings(m.vm.timeGrid, {}, m.vm.plugin, style))
      m.expectCalled(m.vm.nowNextSection(m.vm.timeGrid, m.vm.plugin, style))
      m.expectCalled(m.vm.programItemSection(m.vm.timeGrid, m.vm.plugin, style))
      m.expectCalled(m.vm.channelInfoSection(m.vm.timeGrid, m.vm.plugin, style))
      m.expectCalled(m.vm.timeBarSection(m.vm.timeGrid, m.vm.plugin, style))
      m.expectCalled(m.vm.nowBarSection(m.vm.timeGrid, m.vm.plugin, style))
      m.expectCalled(m.vm.setNowBarIndicatorStyle(m.vm.timeGrid, m.vm.plugin, style))

      m.vm.epgHardcodedStyle(style)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("channelInfoSection")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("set channel info section")
    function _()
      configuration_json = {}
      plugin = new zapp.BasePlugin({ "configuration_json": configuration_json })

      m.vm.channelGuideItem = {
        channelGuideSettings: {}
      }
      style = {
        "style": "style"
      }
      timeGrid = { "id": "timeGrid" }
      m.vm.channelInfoSection(timeGrid, plugin, style)

      m.assertAAHasKey(m.vm.channelGuideItem.channelGuideSettings, "channelAssetHeight")
      m.assertAAHasKey(m.vm.channelGuideItem.channelGuideSettings, "channelPaddingTop")
      m.assertAAHasKey(m.vm.channelGuideItem.channelGuideSettings, "channelPaddingRight")
      m.assertAAHasKey(m.vm.channelGuideItem.channelGuideSettings, "channelPaddingBottom")
      m.assertAAHasKey(m.vm.channelGuideItem.channelGuideSettings, "channelPaddingLeft")
      m.assertAAHasKey(m.vm.channelGuideItem.channelGuideSettings, "channelAssetAspectRatio")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("parseDateStringToSeconds")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("parse date string to seconds")
    function _()
      result = m.vm.parseDateStringToSeconds("2023-09-27T12:00:00.000-04:00")

      m.assertEqual(`${result}`, `${1695830400}`)
    end function


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onKeyPressUp")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("set focus to navigation bar")
    function _()
      m.vm.focusId = 0

      m.expectCalled(m.vm.isDayMenuInFocus(0), true)
      m.expectCalled(m.vm.isDayMenuInFocus(0), true)
      m.expectCalled(m.vm.toggleNavigationMenuFocus())

      m.vm.onKeyPressUp()
    end function

    @it("set focus to 1 item in list")
    function _()
      m.vm.focusId = 1
      m.vm.focusIds = [[0, 1], [2, 3]]

      m.expectCalled(m.vm.isDayMenuInFocus(1), false)
      m.expectCalled(m.vm.isDayMenuInFocus(1), false)
      m.expectCalled(m.vm.setFocusId(0))

      m.vm.onKeyPressUp()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("onKeyPressDown")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("set focus to mext item")
    function _()
      m.vm.focusId = 0
      m.vm.focusIds = [[0, 1], [2, 3]]

      m.expectCalled(m.vm.isDayMenuInFocus(0), false)

      m.vm.onKeyPressDown()
    end function

    @it("set focus to 1 item in list")
    function _()
      m.vm.focusId = 1
      m.vm.isUsingButtons = true
      m.vm.focusIds = [[0, 1], [2, 3]]

      m.expectCalled(m.vm.isDayMenuInFocus(1), true)
      m.expectCalled(m.vm.setFocusId(1))

      m.vm.onKeyPressDown()
    end function


  end class

end namespace
