import "pkg:/source/authorization/BaseAuthPlugin.bs"
import "pkg:/source/authorization/JWTUtil.bs"
import "pkg:/source/lib/BaseClass.bs"
import "pkg:/source/lib/APIUtils.bs"
import "pkg:/source/UIBuilder/view/Component.bs"
import "pkg:/source/zapp-pipes/EntryLoader.bs"

class QuickBrickEpgScreenVM extends zapp.uib.ComponentVM

  'public content = m.createSGNode("CollectionRow")
  public gridStyle = {}
  public results = invalid

  private jwtUtil = new zapp.JWTUtil()
  private timeout = invalid
  private loadChannelTask = invalid
  private loadProgramTask = invalid
  private focusRectangle = invalid
  private channelItem = invalid
  private timeGridContent = invalid
  private contentLoader = new zapp.pipes.EntryLoader()
  public channelIndex = -1
  public programIndex = -1
  public channelFocused = 0

  private riversJsonData = invalid
  private contentDepth = 1
  private taskCount = invalid
  private programsData = []
  private channelCount = invalid
  public content = invalid

  @inject("constants")
  private constants

  ' /**
  '  * @module QuickBrickEpgScreenVM
  '  * @description
  ' **/
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Overridden Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function new(riversJson)
    super(riversJson, "QuickBrickEpgScreenVM")
    'm.setEpgStyle(riversJson.styles)
    'm.makeEPGData(riversJson.data)
    'm.removingGridGap()
    m.riversJsonData = riversJson
    m.focusId = ""
  end function

  public override function load()
    m.makeEPGData(m.riversJsonData)
    return true
  end function

  public override function resetStyles(riversJson)
    m.log.method("resetStyles")
    super.resetStyles(riversJson)
    m.setEpgStyle(riversJson.styles)
    m.setContentStyle(m.feed)

    m.feed = m.feed
    ' m.waitAFrame(m.onReloadStyle, 5)
  end function


  private function applyDataMap(feed as mc.types.node, style as mc.types.assocarray) as void

    if style <> invalid

      if feed <> invalid
        dataSource = feed.getChild(0)
      else
        dataSource = invalid
      end if

      'm.applyDataMapToControls(style.dataMap, dataSource)
    end if

    if m.isFocused
      m.onGainedFocus(true)
    else
      m.focusRectangle.visible = false
    end if

    'generalScreen = m.top.getParent().getParent().getParent().getParent()
    'if generalScreen <> invalid
    '  generalScreen.getChild(1).visible = true
    '  generalScreen.getChild(2).visible = true
    'end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Content creating
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function setEpgContent(data)
    if asString(data.channels_source.source) <> ""
      m.state = "loading"
      m.loadChannelTask = m.executeloadTaskWithUrl("1", m.onLoadMoreResponse, data.channels_source.source, 0)
    end if
  end function

  private function loadMore()
    m.log.method("loadMore")
    m.state = "loading"
  end function

  private function onLoadMoreResponse(result)
    m.log.method("onLoadMoreResponse")

    m.state = "ready"

    m.timeGridContent = CreateObject("roSGNode", "ContentNode")
    m.taskCount = 0
    m.channelCount = -1
    channelsData = result.data
    programUrl = m.riversJsonData.data.programs_source.source

    for each channelData in channelsData.getChildren(-1, 0)
      m.channelItem = m.timeGridContent.createChild("ContentNode")
      m.channelItem.title = channelData.title
      m.channelItem.HDSMALLICONURL = channelData.json.images.image_base
      actuallUrl = m.substituteIdInUrl(programUrl, channelData.id)
      m.taskCount++
      m.loadProgramTask = m.executeloadTaskWithUrl("1", m.onLoadProgramsResponse, actuallUrl, 0)
    end for
  end function

  private function onLoadProgramsResponse(result)
    m.log.method("onLoadProgramsResponse")
    m.programsData = []
    if result.isOk
      m.channelCount++
      programsData = result.data
      for each programData in programsData.getChildren(-1, 0)
        programItem = m.channelItem.createChild("ContentNode")
        programItem.PLAYSTART = m.parseDateStringToSeconds(programData.json.extensions.start_time)
        programItem.PLAYDURATION = m.parseDateStringToSeconds(programData.json.extensions.end_time) - m.parseDateStringToSeconds(programData.json.extensions.start_time)
        programItem.TITLE = programData.title
        programItem.id = programData.id
        programItem.shortDescriptionLine1 = programData.json.summary
        programItem.HDSMALLICONURL = programData.json.images.image_base
        m.programsData.push(programItem)
      end for
    end if
    m.programsData.SortBy("PLAYSTART")
    m.timeGridContent.getChild(m.channelCount).appendChildren(m.programsData)
    m.taskCount--
    if m.taskCount = 0
      aaa = m.getMField("top")
      TimeGrid = aaa.getChild(3)
      TimeGrid.content = m.timeGridContent
      m.state = "ready"
    end if
  end function

  private function onLoadResponse(result)
    m.log.method("onLoadResponse")

    if result.isOk
      m.content.appendChildren(result.data.getChildren(-1, 0))
    end if
    m.state = "ready"
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Public Method
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function onFocusRow(index)

  end function

  public function onSelectItem(index)
    m.log.method("OnItemSelected")
    if m.content <> invalid and index <> -1
      selectedContent = m.content.getChild(index)

      if selectedContent <> invalid
        'topField = m.getMField("top")
        'm.setInstance("selectedId", topField.id)
        'm.selection = m.createSelectionFromContent(selectedContent, m.content)
        'm.selection.target = mc.getPath(m.riversJsonData, "data.target")
        'm.sendAnalyticsEvent(zapp.analytics.EventType.tapCell, invalid, m.getScreenProperties(), m.getComponentProperties(), m.getCellProperties(m.selection, index))
        'm.executeContentSelection(m.selection)
      end if
    end if
    m.isStyleUpdateRequired = true
  end function

  public function onProgramSelected(programIndex)
    if m.channelIndex <> -1
      m.log.info("onProgramSelected", programIndex)
      content = m.content.getChild(m.channelIndex)
      if content <> invalid
        program = m.content.getChild(m.programIndex)
        selection = m.createSelectionFromContent(program)
        m.playSelection(selection)
      end if
    end if
  end function

  public function onChannelFocused(channelIndex)
    m.log.info("onChannelFocused", channelIndex)
    m.channelFocused = channelIndex
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ style support
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function stylingChannelItemComponent(styles)
    channelPoster = invalid
    channelPoster.height = styles.channel_asset_height
    channelPoster.height = styles.channel_asset_height
    channelPoster.backgroundColor = zapp.viewUtils.transposeUIBColor(styles["channel_background_color"])
    translation = [abs(styles.channel_padding_left - styles.channel_padding_right), abs(styles.channel_padding_top - styles.channel_padding_bottom)]
    channelPoster.translation = translation
  end function

  private function stylingDayLabelComponent(styles)
    dayLabel = invalid
    dayLabel.text = zapp.viewUtils.textToTextTransformFormat(dayLabel.text, styles.days_label_text_transform)
    dayLabel = zapp.viewUtils.makeUIBTextStyle(styles, "days_label")
    dayLabelSelected = zapp.viewUtils.makeUIBTextStyle(styles, "days_label_selected")
    dayLabelFocused = zapp.viewUtils.makeUIBTextStyle(styles, "days_label_focused")
  end function

  private function stylingDayTabsLabelComponent(styles)
    dayTabs = invalid
    dayTabs.backgroundColor = zapp.viewUtils.transposeUIBColor(styles["days_tabs_background_color"])
    translation = [abs(styles.days_tabs_padding_left - styles.days_tabs_padding_right), abs(styles.days_tabs_padding_top - styles.days_tabs_padding_bottom)]
    dayTabs.translation = translation
    dayTabs.itemSpacings = [zapp.viewUtils.getUIBInt(styles, "days_tabs_horizontal_gutter", 15)]
  end function

  private function stylingGridComponent(styles)
    grid = invalid
    grid.backgroundColor = zapp.viewUtils.transposeUIBColor(styles["days_tabs_background_color"])
    translation = [abs(styles.days_tabs_padding_left - styles.days_tabs_padding_right), abs(styles.days_tabs_padding_top - styles.days_tabs_padding_bottom)]
    grid.translation = translation
    grid.itemSpacings = [zapp.viewUtils.getUIBInt(styles, "grid_horizontal_gutter", 15)]
  end function

  private function setContentStyle(content)
    m.log.method("setContentStyle")

    if m.style <> invalid
      cellStyle = m.style.cell
      cellStyle.dataMap = m.style.dataMap
      cellStyle.delete("translation")
      mc.setOrAddNodeField(content, "_style", cellStyle)
      mc.setOrAddNodeField(content, "_styleId", m.style.id)
    end if

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ feed processing
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public override function onFeedResult(result)
    m.log.method("onFeedResult")
    m.toggleLoadingDataTask(false)

    if result.isOk
      m.isFirstLoadComplete = true
      m.setContentStyle(result.data)
      m.feed = result.data
      m.restoreSelection()
      m.state = "ready"
      m.content.json = m.feed.json
      m.content.title = m.feed.title
      m.content.id = m.feed.id
      m.setContentStyle(m.content)
      m.content@.receiveRowData(m.feed.getChildren(-1, 0), true)
    else
      m.onFeedError(invalid)
      m.content@.receiveRowData([])
    end if

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function makeEPGData(riversJsonData)
    'channels = m.loadChannels()
    channels = m.setEpgContent(riversJsonData.data)
    'm.setField("content", channels)
    m.log.info("content for Epg", channels)
    aa = m.getMField("top")
    b = aa.getParent()
    aa.getChild(3).content = channels
    m.isFirstLoadComplete = true
    return true
  end function

  private function setEpgStyle(styles)
    if styles <> invalid
      'm.stylingChannelItemComponent(styles)
      'm.stylingDayLabelComponent(styles)
      'm.stylingDayTabsLabelComponent(styles)
      'm.stylingGridComponent(styles)
    end if
  end function

  private function toggleUpdateTimer(active as boolean)
    m.log.info("toggleUpdateTimer is active ", active)
    if active
      m.timeout = m.waitAFrame(m.loadChangedContentOnTimeReason, 60)
    else
      m.cancelWaitTimer(m.timeout)
    end if
  end function

  private function loadChangedContentOnTimeReason()
    m.loadChangedContent("showOnTimer")
    m.toggleUpdateTimer(true)
  end function

  private function loadChangedContent(reason as string) as boolean
    if m.content@.isReloadRequired(reason)
      m.load()
      m.content@.receiveRowData(m.feed.getChildren(-1, 0), true)
      return true
    else
      return false
    end if
  end function

  private function parseDateStringToSeconds(dateString)
    if type(dateString) <> "roString" and type(dateString) <> "String"
      m.log.error("parseDateStringToSeconds: not a valid string")
      return 0
    end if
    if len(dateString) <> 24
      m.log.error("parseDateStringToSeconds: dateString is not in the expected format 'YYYY/MM/DD HH:MM:SS +zzzz'")
      return 0
    end if

    'Change to YYYY-MM-DD HH:MM:SS
    iso8601 = Left(dateString, 19)
    iso8601.replace("/", "-")
    zoneOffset = Right(dateString, 4)
    zoneOffsetHH = Left(zoneOffset, 2)
    zoneOffsetMM = Right(zoneOffset, 2)
    zoneOffsetSign = 1

    if dateString.instr(20, "+") > 0
      zoneOffsetSign = -1
    end if

    parsedDate = CreateObject("roDateTime")
    parsedDate.FromISO8601String(iso8601)
    parsedSeconds = parsedDate.AsSeconds()

    ' return integer seconds in GMT
    result = parsedSeconds + zoneOffsetSign * ((zoneOffsetHH.ToInt() * 3600) + (zoneOffsetMM.ToInt() * 60))
    return result
  end function

  private function substituteIdInUrl(url as string, id as integer) as string
    return url.replace("{{id}}", id)
  end function

  private function removingGridGap()
    topFields = m.getMField("top")
    topParant = topFields.getParent()
    for each child in topParant.getChildren(-1, 0)
      if child.id = m.getInstance("selectedId")
        childTranslationY = child.translation[1]
        gridTranslation = zapp.viewUtils.makeUIBPosition(m.riversJsonData.styles, "grid", 20, 20)
        if gridTranslation[1] <> 20 and childTranslationY > gridTranslation[1]
          child.translation = [m.gridStyle.translation[0], childTranslationY - gridTranslation[1]]
        end if
      end if
    end for
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Hardcoded data
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function loadChannels()
    content = createObject("roSGNode", "ContentNode")

    ' make an API call to get the list of channels
    raw = readASCIIFile("pkg:/source/quick-brick-epg-screen/api/1_channels.json")
    json = parseJSON(raw)
    children = []
    ' channels array
    for each channel in json
      raw = readASCIIFile("pkg:/source/quick-brick-epg-screen/api/" + channel + ".json")
      channelJSON = parseJSON(raw)

      channel = createObject("roSGNode", "ContentNode")
      channel.title = channelJSON.channel.call_sign

      if channelJSON.channel.major <> invalid
        channel.title += " " + channelJSON.channel.major.toStr()
      end if

      if channelJSON.channel.minor <> invalid
        channel.title += "." + channelJSON.channel.minor.toStr()
      end if

      channel.id = channelJSON.object_id.toStr()
      channel.appendChildren(m.loadPrograms(channel))
      children.push(channel)
    end for

    content.appendChildren(children)
    return content
  end function

  function loadPrograms(channel)
    ' the id was set in the root handler
    id = channel.id

    ' we'll fake the timestamps for demo purposes so that there Is
    ' always content displayed for the current time
    dt = createObject("roDateTime")
    now = dt.AsSeconds()
    playStart = now - (now mod 1800) - 3600

    raw = readASCIIFile("pkg:/source/quick-brick-epg-screen/api/3_guide_" + id + ".json")
    json = parseJSON(raw)

    programs = []

    for each programa in json
      program = createObject("roSGnode", "ContentNode")

      if programa.title <> invalid and programa.title <> ""
        program.title = programa.title
      else if programa.airing_details.show_title <> invalid and programa.airing_details.show_title <> ""
        program.title = programa.airing_details.show_title
      else
        program.title = "---"
      end if

      if programa.season_number <> invalid and programa.episode_number <> invalid
        program.description = "S" + programa.season_number.toStr() + " E" + programa.episode_number.toStr()
      end if

      program.playStart = playStart
      program.playDuration = programa.airing_details.duration

      programs.push(program)

      playstart += program.playDuration
    end for

    return programs
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ lifecycle
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onShow() as void
    m.log.method("onShow", m.state)
    if m.state = "ready" or m.state = "initialized" or m.state = "error"
      if m.isFirstLoadComplete
        m.log.info("grid already loaded; code to manage reloadKey expiration is not yet implemented")

        'if m.loadChangedContent("showScreen")
        '  m.log.info("updating grid content")
        '  m.toggleUpdateTimer(true)
        'end if
        'm.removingGridGap()
      else
        m.log.info("this zapp.view has never loaded - trying now")
        m.load()
      end if
    end if
    m.restoreSelection()
  end function

  function restoreSelection()
    if m.selection <> invalid and m.content <> invalid and m.content.count() > 0

    end if
  end function

  public override function cancelLoad()
    m.log.method("cancelLoad")

    super.cancelLoad()

    'if m.loadMoreTask <> invalid
    '  m.cancelTask(m.loadMoreTask)
    '  m.loadMoreTask = invalid
    '  m.state = "ready"
    'end if

    m.isShowingLoadingSpinner = false
  end function

  protected override function onHide()
    m.toggleUpdateTimer(false)
  end function


end class