import "pkg:/source/authorization/BaseAuthPlugin.bs"
import "pkg:/source/authorization/JWTUtil.bs"
import "pkg:/source/lib/BaseClass.bs"
import "pkg:/source/lib/APIUtils.bs"
import "pkg:/source/UIBuilder/view/Component.bs"
import "pkg:/source/zapp-controls/BaseCollectionRowVM.bs"
import "pkg:/source/lib/ViewUtils.bs"
import "pkg:/source/zapp-pipes/EntryLoader.bs"
import "pkg:/source/UIBuilder/view/ScreenVM.bs"

enum ButtonAction
  play = "play"
  info = "info"
  favorite = "favorite"
end enum

class QuickBrickEpgScreenVM extends zapp.uib.ScreenVM

  'styling
  public filterLabelText = ""
  public menuButtons = []
  public titleTextStyle = {}
  public menuStyle = {}
  public menuPosition = [960, 584]
  public buttonSize = [700, 100]
  public buttonSpacing = 5
  public jumpToIndex = -1
  public dayButtonStyle = invalid
  public filterButtonStyle = invalid
  public dayButtonVisible = false
  public filterButtonVisible = false
  public isHeaderShown = false
  public isHeaderImageVisible = false
  public isHeaderImageVideoPlayback = false
  public isDetailsVisible = false
  public headerItem = invalid
  public headerStyle = invalid

  'public content = m.createSGNode("CollectionRow")
  public gridStyle = {}
  public results = invalid
  public channelIndex = -1
  public programIndex = -1
  public channelFocused = 0
  public programFocused = 0
  public content = invalid
  public listContent = invalid
  public listStyle = {}
  public jumpToItem = 0
  public itemListVisible = false
  public listTranslation = [0, 400]
  public contentStartTime = {}
  public leftEdgeTargetTime = 0

  private jwtUtil = new zapp.JWTUtil()
  private canShowHeader = false
  private isHeaderUpdatingOnFocus = false
  private timeout = invalid
  private loadChannelTask = invalid
  private loadProgramTask = invalid
  private focusRectangle = invalid
  private channelItem = invalid
  private timeGridContent = invalid
  private categoriesList = []
  private contentLoader = new zapp.pipes.EntryLoader()

  private oldSelectedCategory = ""
  private selectedIndexLabel = "now_label"
  private focusIds = []
  private riversJsonData = invalid
  private contentDepth = 1
  private taskCount = invalid
  private programsData = []
  private channelCount = invalid
  private focusIndex = 0
  private localizations = invalid
  private isUsingButtons = true
  private dayIsSelected = false
  private filterIsSelected = false
  private cellStyle
  private controlsGroup as mc.types.node
  private backgroundDayRectangle
  private button1 as mc.types.node
  private button2 as mc.types.node
  private buttonActionMap = {
    open_day_tab_action: ButtonAction.play
    open_channel_filter_tab: ButtonAction.favorite
  }
  private showAnim
  private hideAnim

  @inject("constants")
  private constants

  @injectClass("zapp.PluginManager")
  private plugins

  ' /**
  '  * @module QuickBrickEpgScreenVM
  '  * @description
  ' **/
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Overridden Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function new(riversJson)
    super(riversJson, "QuickBrickEpgScreenVM")
    m.setEpgStyle(riversJson.styles)
    'm.makeEPGData(riversJson.data)
    'm.removingGridGap()
    'm.updateButtons(riversJson.styles)
    m.focusId = "TimeGrid"
    m.style = m.getChildCellStyle(riversJson)
    m.riversJsonData = riversJson
    m.controlsGroup = m.getMField("controlsGroup")
    m.button1 = m.getMField("button1")
    m.button2 = m.getMField("button2")
    m.backgroundDayRectangle = m.getMField("backgroundDayRectangle")
    m.contentDepth = zapp.viewUtils.getUIBInt(riversJson.styles, "data_depth", 1)
    m.listTranslation = [0, 400]
    m.createAnimations()
  end function

  public override function load()
    m.makeEPGData(m.riversJsonData)
    m.epgHardcodedStyle(m.riversJsonData.styles)
    m.updateButtons(m.riversJsonData.styles)
    m.updateHeaderStyle(m.riversJsonData.styles)
    m.updateFocusControls()
    m.state = "ready"
    if m.isHeaderUpdatingOnFocus
      m.headerItem = invalid
      'm.observeNodeField(m.screenState, "focusedEntry", m.onFocusEntry)
    else
      m.headerItem = m.screenState.originEntry
      m.isHeaderShown = m.canShowHeader
    end if
    return true
  end function

  public override function onFocusEntry(entry) as void

    if m.isHeaderUpdatingOnFocus = true
      m.headerItem = entry
    end if
    m.isHeaderShown = m.canShowHeader
  end function

  public override function resetStyles(riversJson)
    m.log.method("resetStyles")
    super.resetStyles(riversJson)
    m.setEpgStyle(riversJson.styles)
    m.setContentStyle(m.feed)

    m.feed = m.feed
    ' m.waitAFrame(m.onReloadStyle, 5)
  end function

  public function onDayButtonSelected()
    m.log.info("onDayButtonSelected")
    m.getLocalization()
    items = []
    for each item in m.localizations
      listItem = {
        "title": item
      }
      items.push(listItem)
    end for
    customOrder = [
      "now_label",
      "today",
      "monday",
      "tuesday",
      "wednesday",
      "thursday",
      "friday",
      "saturday",
      "sunday"
    ]
    sortedData = []
    for each orderItem in customOrder
      for each dataItem in items
        if lcase(dataItem.title) = lcase(orderItem)
          sortedData.Push(dataItem)
          exit for ' Exit the inner loop after finding a match
        end if
      end for
    next

    content = m.createContentFromItems(sortedData)
    if not m.dayIsSelected
      m.onShowHideAnimation(m.showAnim, true, true)
      m.sendNotification("isTopNavBarShowing", false)
    end if
    m.itemListVisible = true
    m.dayIsSelected = true
    m.listContent = content
    m.setFocusId("list")
  end function

  public function onFilterButtonSelected()
    m.log.info("onFilterButtonSelected")
    items = []
    m.categoriesList = ["Comedy", "Sport", "Drama"]
    for i = 0 to m.categoriesList.count() - 1
      listItem = {
        "title": m.categoriesList[i]
      }
      items.push(listItem)
    end for
    content = m.createContentFromItems(items)
    if not m.filterIsSelected
      m.onShowHideAnimation(m.showAnim, true, true)
      m.sendNotification("isTopNavBarShowing", false)
    end if
    m.itemListVisible = true
    m.filterIsSelected = true
    m.listContent = content
    m.setFocusId("list")
  end function

  private function onShowHideAnimation(anim as mv.animations.AnimationBase, visible as boolean, animated as boolean)
    if animated
      anim.start()
    else
      anim.jumpToEnd()
    end if
  end function

  private function applyDataMap(feed as mc.types.node, style as mc.types.assocarray) as void

    if style <> invalid

      if feed <> invalid
        dataSource = feed.getChild(0)
      else
        dataSource = invalid
      end if

      'm.applyDataMapToControls(style.dataMap, dataSource)
    end if

    if m.isFocused
      m.onGainedFocus(true)
    else
      m.focusRectangle.visible = false
    end if

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Content creating
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function createAnimations()
    m.showAnim = new mv.animations.Move(m.backgroundDayRectangle, 0.1, [-700, 0], [0, 0])
    m.hideAnim = new mv.animations.Move(m.backgroundDayRectangle, 0.3, [0, 0], [-700, 0])
  end function


  private function epgHardcodedStyle(style)
    TimeGrid = m.getMField("TimeGrid")
    TimeGrid.programBackgroundBitmapUri = "pkg:/images/TimeGridBackground.9.png"
    TimeGrid.timeBarBitmapUri = ":"
    TimeGrid.channelInfoBackgroundBitmapUri = "pkg:/images/TimeGridBackground.9.png"
    TimeGrid.nowBarBlendColor = "#FF5247"
    TimeGrid.programNowNextTimeFocusedColor = "#FF5247"
    TimeGrid.programTitleColor = "#FFFFFF"
    TimeGrid.programTitleFocusedColor = "#FFFFFF"
    'TimeGrid.itemSize = [1920, 150]
    TimeGrid.timeLabelColor = "#FFFFFF"
    TimeGrid.pastTimeScreenBlendColor = "#3D80FF"
    TimeGrid.focusBitmapUri = "pkg:/images/SearchFocusBackground2.9.png"
    TimeGrid.duration = 12600
    TimeGrid.timebarHeight = 120
    TimeGrid.sectionDividerTopOffset = 30
    TimeGrid.numRows = 6
    TimeGrid.channelInfoWidth = 245
    TimeGrid.scrollSpeed = 100
    TimeGrid.overlayBitmapUri = ""
    TimeGrid.nowBarWidth = 60

    TimeGrid.vertFocusAnimationStyle = "floatingFocus"
  end function

  private function createContentFromItems(items)
    if not mc.isArray(items)
      return invalid
    end if

    entryWraper = createObject("roSGNode", "ZPEntry")
    for i = 0 to items.count() - 1
      entry = m.createSGNode("ZPEntry", entryWraper, items[i], {
        title: items[i].title
        json: {
          title: items[i].title
          selected: lCase(items[i].title) = lCase(m.selectedIndexLabel)
        }
      })
      mc.setOrAddNodeField(entry, "isSelected", lCase(items[i].title) = lCase(m.selectedIndexLabel))
    end for
    m.setListStyle(entryWraper)
    return entryWraper
  end function

  private function setEpgContent(data)
    if asString(data.channels_source.source) <> ""
      m.state = "loading"
      m.loadChannelTask = m.executeloadTaskWithUrl("1", m.onLoadMoreResponse, data.channels_source.source, 0)
    end if
  end function

  private function loadMore()
    m.log.method("loadMore")
    m.state = "loading"
  end function

  private function onLoadMoreResponse(result)
    m.log.method("onLoadMoreResponse")

    m.state = "ready"

    m.timeGridContent = CreateObject("roSGNode", "ContentNode")
    m.taskCount = 0
    m.channelCount = -1
    channelsData = result.data
    programUrl = m.riversJsonData.data.programs_source.source

    for each channelData in channelsData.getChildren(-1, 0)
      m.channelItem = m.timeGridContent.createChild("ContentNode")
      m.channelItem.title = channelData.title
      m.channelItem.HDSMALLICONURL = channelData.json.images.image_base
      actuallUrl = m.substituteIdInUrl(programUrl, channelData.id)
      m.taskCount++
      m.loadProgramTask = m.executeloadTaskWithUrl("1", m.onLoadProgramsResponse, actuallUrl, 0)
    end for
  end function

  private function onLoadProgramsResponse(result)
    m.log.method("onLoadProgramsResponse")
    m.programsData = []
    if result.isOk
      m.channelCount++
      programsData = result.data
      for each programData in programsData.getChildren(-1, 0)
        programItem = m.channelItem.createChild("ContentNode")
        programItem.PLAYSTART = m.parseDateStringToSeconds(programData.json.extensions.start_time)
        programItem.PLAYDURATION = m.parseDateStringToSeconds(programData.json.extensions.end_time) - m.parseDateStringToSeconds(programData.json.extensions.start_time)
        programItem.TITLE = programData.title
        programItem.id = programData.id
        programItem.genre = programData.json.genre
        programItem.shortDescriptionLine1 = programData.json.summary
        'programItem.HDSMALLICONURL = programData.json.images.image_base
        m.programsData.push(programItem)
      end for
    end if
    m.programsData.SortBy("PLAYSTART")
    m.timeGridContent.getChild(m.channelCount).appendChildren(m.programsData)
    m.taskCount--
    if m.taskCount = 0
      m.setField("content", m.timeGridContent)
      currentTime = CreateObject("roDateTime").asSeconds()
      m.contentStartTime = currentTime
      m.content = m.timeGridContent
      m.log.info("content for Epg", m.timeGridContent)
      m.state = "ready"
    end if
  end function

  private function onLoadResponse(result)
    m.log.method("onLoadResponse")

    if result.isOk
      m.content.appendChildren(result.data.getChildren(-1, 0))
    end if
    m.state = "ready"
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Public Method
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function onSelectedIndexChange(index)
    m.log.info("selected index", index)
    item = m.menuButtons[index]

    if item <> invalid

      screen = m.getScreen(item.target)

      if screen <> invalid
        m.setInstance("currentSelection", invalid)
        m.log.info("found screen for button, displaying it")
        m.focusIndex = index
        m.push(screen)
        m.setFocus(screen)
      else
        m.log.error("could not get the screen for", item.target)
      end if
    end if
  end function

  public function onFocusRow(index)

  end function

  public function onSelectItem(index)
    m.log.method("OnItemSelected")

    currentTime = CreateObject("roDateTime")
    currentDayIndex = currentTime.getDayOfWeek()
    m.selectedIndexLabel = m.listContent.getChild(index).title

    if m.content <> invalid and index <> -1 and m.dayIsSelected
      newIndex = index
      if index > 1
        newIndex = index - 1
      end if

      dayDifference = newIndex - currentDayIndex
      if dayDifference < 0
        dayDifference = 0
      end if

      targetTime = currentTime.asSeconds() + (86400 * dayDifference)

      m.leftEdgeTargetTime = targetTime
      m.content = m.timeGridContent
      m.onDayButtonSelected()
      m.jumpToItem = index
    else if m.content <> invalid and index <> -1 and m.filterIsSelected
      m.content = m.filterContentByCategories(m.categoriesList[index])
      m.onFilterButtonSelected()
      m.jumpToItem = index
    end if

    m.isStyleUpdateRequired = true
  end function


  public function onProgramSelected(programIndex)
    m.selectProgram(programIndex)
  end function

  public function onChannelFocused(channelIndex)
    m.log.info("onChannelFocused", channelIndex)
    m.channelFocused = channelIndex
  end function

  public function onProgramFocused(programIndex)
    m.log.info("onProgramFocused", programIndex)
    m.programFocused = programIndex
    m.selectProgram(programIndex)
  end function

  private function selectProgram(programIndex)
    if m.channelFocused <> -1
      m.log.info("onProgramSelected", programIndex)
      content = m.content.getChild(m.channelFocused)
      if content <> invalid
        program = content.getChild(programIndex)
        m.onFocusEntry(program)
        'selection = m.createSelectionFromContent(program)
        'selection.playMode = "default"
        'mc.setOrAddNodeField(selection.initialItem, "itemType", "video")
        'm.executeContentSelection(selection)
      end if
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ style support
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function updateHeaderStyle(styles)
    m.log.info("setHeroStyle")
    m.isHeaderShown = false
    m.canShowHeader = mc.getPath(styles, "header_is_shown", true)
    m.isHeaderUpdatingOnFocus = mc.getPath(styles, "header_update_on_focus", true)
    m.isDetailsVisible = m.canShowHeader and mc.getPath(styles, "header_text_is_shown", false)
    m.isHeaderImageVisible = m.canShowHeader and mc.getPath(styles, "header_image_is_shown", false)
    m.isHeaderImageVideoPlayback = mc.getPath(styles, "header_image_is_video_preview", true)
    'if m.isHeaderImageVideoPlayback
    '  m.getMField("contentGroup").videoTarget = m.getMField("headerControl").findNode("fadingBackgroundImage")
    'end if
    m.headerStyle = styles
  end function

  private function getChildCellStyle(componentJson as mc.types.assocarray)
    cellStyles = m.getInstance("cellStyles")
    key = asString(componentJson.styles.cell_style_key)
    if cellStyles.styleIdsByKey.doesExist(key)
      cellKey = cellStyles.styleIdsByKey[key]
      return cellStyles[cellKey]
    end if
    return invalid
  end function

  private function setListStyle(content)
    m.log.method("setListStyle")

    if m.style <> invalid
      cellStyle = m.style.cell
      cellStyle.dataMap = m.style.dataMap
      cellStyle.delete("translation")
      listStyle = zapp.collectionRowUtils.getRowListStyle(m.riversJson.styles, cellStyle.normal)
      listStyle.itemSize = listStyle.rowItemSize
      m.listStyle = listStyle
      mc.setOrAddNodeField(content, "_style", cellStyle)
      mc.setOrAddNodeField(content, "_styleId", m.style.id)
    end if

  end function

  private function stylingChannelItemComponent(styles)
    channelPoster = invalid
    channelPoster.height = styles.channel_asset_height
    channelPoster.height = styles.channel_asset_height
    channelPoster.backgroundColor = zapp.viewUtils.transposeUIBColor(styles["channel_background_color"])
    translation = [abs(styles.channel_padding_left - styles.channel_padding_right), abs(styles.channel_padding_top - styles.channel_padding_bottom)]
    channelPoster.translation = translation
  end function

  private function stylingDayLabelComponent(styles)
    localizedText = "aaaa"'zapp.viewUtils.getLocalizedText(control, localization)

    m.filterLabelText = "Filter Days"
    dayLabelText = zapp.viewUtils.textToTextTransformFormat(localizedText, styles.days_label_text_transform)
    dayLabelFont = zapp.viewUtils.makeUIBTextStyle(styles, "days_label")
    dayLabelSelected = zapp.viewUtils.makeUIBTextStyle(styles, "days_label_selected")

    marginStyle = zapp.viewUtils.makeUIBMargin(styles, "tv_buttons_container")

    marginTop = zapp.viewUtils.getUIBInt(styles, "days_tabs_padding_top")
    marginRight = zapp.viewUtils.getUIBInt(styles, "days_tabs_padding_right")
    marginBottom = zapp.viewUtils.getUIBInt(styles, "days_tabs_padding_bottom")
    marginLeft = zapp.viewUtils.getUIBInt(styles, "days_tabs_padding_left")

    m.listStyle = {
      translation: [abs(marginLeft - marginRight), abs(marginTop - marginBottom)]
      itemSpacing: [zapp.viewUtils.getUIBInt(styles, "days_tabs_horizontal_gutter", 15)]
      itemSize: zapp.viewUtils.makeUIBSize(styles, "item", 680, 80)
      vertFocusAnimationStyle: ""
      focusBitmapBlendColor: zapp.viewUtils.makeUIBTextStyle(styles, "days_label_focused")
      focusBitmapUri: zapp.viewUtils.transposeUIBColor(styles["days_tabs_background_color"])
    }
  end function

  private function stylingGridComponent(styles)
    grid = invalid
    grid.backgroundColor = zapp.viewUtils.transposeUIBColor(styles["days_tabs_background_color"])
    translation = [abs(styles.days_tabs_padding_left - styles.days_tabs_padding_right), abs(styles.days_tabs_padding_top - styles.days_tabs_padding_bottom)]
    grid.translation = translation
    grid.itemSpacings = [zapp.viewUtils.getUIBInt(styles, "grid_horizontal_gutter", 15)]
  end function

  private function setContentStyle(content)
    m.log.method("setContentStyle")

    if m.style <> invalid
      cellStyle = m.style.cell
      cellStyle.dataMap = m.style.dataMap
      cellStyle.delete("translation")
      mc.setOrAddNodeField(content, "_style", cellStyle)
      mc.setOrAddNodeField(content, "_styleId", m.style.id)
    end if

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ feed processing
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public override function onFeedResult(result)
    m.log.method("onFeedResult")
    m.toggleLoadingDataTask(false)

    if result.isOk
      m.isFirstLoadComplete = true
      m.setContentStyle(result.data)
      m.feed = result.data
      m.restoreSelection()
      m.state = "ready"
      m.content.json = m.feed.json
      m.content.title = m.feed.title
      m.content.id = m.feed.id
      m.setContentStyle(m.content)
      m.content@.receiveRowData(m.feed.getChildren(-1, 0), true)
    else
      m.onFeedError(invalid)
      m.content@.receiveRowData([])
    end if

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function filterContentByCategories(catagory as string)
    if catagory <> m.oldSelectedCategory
      content = m.timeGridContent.clone(true)
      for each channel in content.getChildren(-1, 0)
        for each program in channel.getChildren(-1, 0)
          if asString(program.genre) <> catagory
            channel.removeChild(program)
          end if
        end for
        if channel.getChildCount() = 0
          content.removeChild(channel)
        end if
      end for
      m.oldSelectedCategory = catagory
      return content
    end if
    m.oldSelectedCategory = ""
    return m.timeGridContent
  end function

  private function updateFocusControls()
    itemGroup = []
    if m.isUsingButtons
      buttonGroup = []
      if m.dayButtonVisible
        buttonGroup.push("button1")
      end if
      if m.filterButtonVisible
        buttonGroup.push("button2")
      end if
      m.focusIds.push(buttonGroup)
    end if
    itemGroup.push("TimeGrid")
    m.focusIds.push(itemGroup)

  end function

  private function updateButtons(styles as mc.types.assocarray)
    m.getLocalization()
    m.ascertainUsedButtons(styles)
    m.setButtonStyles(styles)
    m.setButtonsActions(styles)
  end function

  private function ascertainUsedButtons(styles)
    m.isUsingButtons = zapp.viewUtils.getUIBBool(styles, "tv_buttons_container_buttons_enabled")
    'm.dayButtonStyle = zapp.viewUtils.applyActionButtonStyle(m.button1, styles, "tv_buttons_button_1", m.localizations)
    'if m.isUsingButtons
    '  marginStyle = zapp.viewUtils.makeUIBMargin(styles, "tv_buttons_container")
    '  controlsGroupAligment = asString(styles.tv_buttons_container_align)
    '  controlsGroupPosition = asString(styles.tv_buttons_container_position)
    '  m.controlsGroup.itemSpacings = [zapp.viewUtils.getUIBInt(styles, "tv_buttons_container_horizontal_gutter", 15)]
    '  m.controlsGroup.translation = [abs(marginStyle.marginLeft - marginStyle.marginRight), abs(marginStyle.marginTop - marginStyle.marginBottom)]
    'end if

    if m.isUsingButtons
      m.dayButtonVisible = zapp.viewUtils.getUIBBool(styles, "tv_buttons_button_1_button_enabled")
      m.filterButtonVisible = zapp.viewUtils.getUIBBool(styles, "tv_buttons_button_2_button_enabled")
      if not m.dayButtonVisible and not m.filterButtonVisible
        m.isUsingButtons = false
      end if
    end if
  end function

  private function getLocalization()
    plugin = m.plugins.getPluginById("quick-brick-epg-screen")
    localization = asAA(plugin.json.configuration_json.localizations)
    language = m.getInstance("languageCode") ?? "en"
    m.localizations = localization[language]
  end function

  private function setButtonsActions(styles)
    mc.setOrAddNodeField(m.button1, "action", m.buttonActionMap[asString(styles.tv_buttons_button_1_assign_action)])
    mc.setOrAddNodeField(m.button2, "action", m.buttonActionMap[asString(styles.tv_buttons_button_2_assign_action)])
  end function

  private function setButtonStyles(styles)
    bundle = m.styleManager@.loadBundle("pkg:/source/quick-brick-epg-screen/QuickBrickEpgScreenVM.json")
    buttonStyle = m.styleManager@.getStyle("pkg:/source/quick-brick-epg-screen/QuickBrickEpgScreenVM.buttons.rectangle_subtext")
    if m.checkIfIndependentStylesNeeded(styles)
      'm.dayButtonStyle = zapp.viewUtils.applyActionButtonStyle(m.button1, styles, "tv_buttons_button_1", m.localizations)
      'm.filterButtonStyle = zapp.viewUtils.applyActionButtonStyle(m.button2, styles, "tv_buttons_button_2", m.localizations)
      m.button1.style = zapp.viewUtils.applyActionButtonStyle(m.button1, styles, "tv_buttons_button_1", m.localizations)
      m.button2.style = zapp.viewUtils.applyActionButtonStyle(m.button2, styles, "tv_buttons_button_2", m.localizations)
    else
      m.setGeneralStyleForAllButtons(styles)
    end if
  end function

  private function checkIfIndependentStylesNeeded(styles)
    independentStyles = zapp.viewUtils.getUIBBool(styles, "tv_buttons_container_independent_styles")
    if independentStyles
      return true
    end if
    return false
  end function

  private function setGeneralStyleForAllButtons(styles)
    for i = 0 to m.controlsGroup.getChildCount() - 1
      if m.controlsGroup.getChild(i).visible
        for each item in m.controlsGroup.getChildren(-1, 0)
          prefix = m.convertItemIdToPrefix(m.controlsGroup.getChild(i).id)
          item.style = zapp.viewUtils.applyActionButtonStyle(item, styles, prefix, m.localizations)
          item.text = "aaaaaaaaaa"
        end for
        exit for
      end if
    end for
  end function

  private function convertItemIdToPrefix(id as string)
    if id = "button1"
      return "tv_buttons_button_1"
    else
      return "tv_buttons_button_2"
    end if
  end function


  private function makeEPGData(riversJsonData)
    m.setEpgContent(riversJsonData.data)
    m.isFirstLoadComplete = true
    return true
  end function

  private function setEpgStyle(styles)
    if styles <> invalid
      'm.stylingChannelItemComponent(styles)
      m.stylingDayLabelComponent(styles)
      'm.stylingGridComponent(styles)
    end if
  end function

  private function toggleUpdateTimer(active as boolean)
    m.log.info("toggleUpdateTimer is active ", active)
    if active
      m.timeout = m.waitAFrame(m.loadChangedContentOnTimeReason, 60)
    else
      m.cancelWaitTimer(m.timeout)
    end if
  end function

  private function loadChangedContentOnTimeReason()
    m.loadChangedContent("showOnTimer")
    m.toggleUpdateTimer(true)
  end function

  private function loadChangedContent(reason as string) as boolean
    if m.content@.isReloadRequired(reason)
      m.load()
      m.content@.receiveRowData(m.feed.getChildren(-1, 0), true)
      return true
    else
      return false
    end if
  end function

  private function parseDateStringToSeconds(dateString)
    if type(dateString) <> "roString" and type(dateString) <> "String"
      m.log.error("parseDateStringToSeconds: not a valid string")
      return 0
    end if
    if len(dateString) <> 24
      m.log.error("parseDateStringToSeconds: dateString is not in the expected format 'YYYY/MM/DD HH:MM:SS +zzzz'")
      return 0
    end if

    'Change to YYYY-MM-DD HH:MM:SS
    iso8601 = Left(dateString, 19)
    iso8601.replace("/", "-")
    zoneOffset = Right(dateString, 4)
    zoneOffsetHH = Left(zoneOffset, 2)
    zoneOffsetMM = Right(zoneOffset, 2)
    zoneOffsetSign = 1

    if dateString.instr(20, "+") > 0
      zoneOffsetSign = -1
    end if

    parsedDate = CreateObject("roDateTime")
    parsedDate.FromISO8601String(iso8601)
    parsedSeconds = parsedDate.AsSeconds()

    ' return integer seconds in GMT
    result = parsedSeconds + zoneOffsetSign * ((zoneOffsetHH.ToInt() * 3600) + (zoneOffsetMM.ToInt() * 60))
    return result
  end function

  private function substituteIdInUrl(url as string, id as integer) as string
    return url.replace("{{id}}", id)
  end function

  private function removingGridGap()
    topFields = m.getMField("top")
    topParent = topFields.getParent()
    for each child in topParent.getChildren(-1, 0)
      if child.id = m.getInstance("selectedId")
        childTranslationY = child.translation[1]
        gridTranslation = zapp.viewUtils.makeUIBPosition(m.riversJsonData.styles, "grid", 20, 20)
        if gridTranslation[1] <> 20 and childTranslationY > gridTranslation[1]
          child.translation = [m.gridStyle.translation[0], childTranslationY - gridTranslation[1]]
        end if
      end if
    end for
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Presses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  override function onKeyPressUp() as boolean
    m.log.info("on Keypress up. focusId", m.focusId)
    if m.isButtonsInFocus(m.focusId)
      zapp.appService.toggleNavMenuFocus(true)
    end if

    if m.isFocusOnList(m.focusId) and not m.isButtonsInFocus(m.focusId)
      m.setFocusId(m.focusIds[0][0])
    end if
    return true
  end function

  public function onKeyPressDown() as boolean
    m.log.info("onKeyPressDown", m.focusId)
    if m.isFocusOnList(m.focusId) and m.isButtonsInFocus(m.focusId)
      if m.isUsingButtons
        m.setFocusId(m.focusIds[1][0])
      else
        m.setFocusId(m.focusIds[0][0])
      end if
    end if

    return true
  end function

  private function isButtonsInFocus(focusId)
    for i = 0 to m.focusIds[0].count() - 1
      if focusId = m.focusIds[0][i]
        return true
      end if
    end for
    return false
  end function

  private function isFocusOnList(focusId)
    return focusId <> "list"
  end function

  public function onKeyPressLeft() as boolean
    m.log.info("onKeyPressLeft", m.focusId)
    if m.isFocusOnList(m.focusId)
      m.setFocusId(mc.collections.getItemAtOffset(m.focusIds[0], m.focusId, -1))
    end if
    return true
  end function

  private function onKeyPressRight() as boolean
    m.log.info("onKeyPressRight", m.focusId)
    if m.isFocusOnList(m.focusId)
      m.setFocusId(mc.collections.getItemAtOffset(m.focusIds[0], m.focusId, 1))
    end if
    return true
  end function

  override function onKeyPressBack() as boolean
    m.log.info("onKeyPressBack", m.focusId)
    if m.focusId = "list"
      if m.dayIsSelected
        m.setFocusId("button1")
      else if m.filterIsSelected
        m.setFocusId("button2")
      end if
      m.log.info("focusing on button")
      m.onShowHideAnimation(m.hideAnim, false, true)
      m.sendNotification("isTopNavBarShowing", true)
      m.itemListVisible = false
      m.dayIsSelected = false
      m.filterIsSelected = false
    end if
    return true
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ lifecycle
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onShow() as void
    m.log.method("onShow", m.state)
    if m.state = "ready" or m.state = "initialized" or m.state = "error"
      if m.isFirstLoadComplete
        m.log.info("grid already loaded; code to manage reloadKey expiration is not yet implemented")

        'if m.loadChangedContent("showScreen")
        '  m.log.info("updating grid content")
        '  m.toggleUpdateTimer(true)
        'end if
        'm.removingGridGap()
      else
        m.log.info("this zapp.view has never loaded - trying now")
        m.load()
      end if
    end if
    m.restoreSelection()
  end function

  function restoreSelection()
    if m.selection <> invalid and m.content <> invalid and m.content.count() > 0

    end if
  end function

  public override function cancelLoad()
    m.log.method("cancelLoad")

    super.cancelLoad()

    'if m.loadMoreTask <> invalid
    '  m.cancelTask(m.loadMoreTask)
    '  m.loadMoreTask = invalid
    '  m.state = "ready"
    'end if

    m.isShowingLoadingSpinner = false
  end function

  protected override function onHide()
    m.toggleUpdateTimer(false)
  end function

end class