import "pkg:/source/authorization/BaseAuthPlugin.bs"
import "pkg:/source/lib/Request.bs"
import "pkg:/source/lib/URI.bs"
import "pkg:/source/authorization/JWTUtil.bs"

class AdobePrimetimeQuickBrickAuthPlugin extends zapp.auth.BaseAuthPlugin

  private resourceID = ""
  private requestorID = ""
  private secret = ""
  private publicKey = ""
  private baseUrl = ""
  private pollResult as mc.types.assocarray

  @inject("constants", "applicasterDeviceId")
  private deviceId

  @injectClass("zapp.JWTUtil")
  private JWTUtil

  @injectClass("zapp.URI")
  private uri

  public function new(plugin)
    super("AdobePrimetime", plugin)
    m.isTokenUsableWithDSP = true
    m.resourceID = plugin.getStringValue("resourceID", "")
    m.requestorID = plugin.getStringValue("requestorID", "")
    m.secret = plugin.getStringValue("secret", "")
    m.publicKey = plugin.getStringValue("publicKey", "")
    m.baseUrl = plugin.getStringValue("base_url", "https://api.auth.adobe.com")
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ overridden
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public override function _getAccountInfo()
    userId = mc.getPath(m.authData, "user.userId", "not known yet")

    return {
      id: userId
      email: "anonymous@anon.com"
      username: "anonymous"
      regCode: mc.getPath(m.authData, "rawAuthData.regcode")
    }
  end function


  public override function _verify()
    ' We don't need the token for the AuthZ calls, but we
    ' do a simple local verification just to make sure AuthN completed

    if not m.isAuthDataExpired()
      return m.getAuthorization()
    end if

    return m.createErrorResult("Invalid token for verification")
  end function

  public override function initiateDCR()
    m.log.method("initiateDCR_")
    requestPath = "/o/client/register"
    params = {
      "software_statement": "softwareStatement"
    }
    headers = {
      "Accept": "application/json"
      "Authorization": "application/json"
    }
    url = m.baseUrl + requestPath
    m.log.info("url ", url, "headers", headers, "params", params)

    request = m.getRequestUtil()
    result = request.post(url, params, headers)

    m.log.info("result is ", result)

    if result <> invalid and result.code <> invalid and result.code <> ""
      return m.createDCRResult(result.code)
    end if

    m.log.error("Error retrieving client credentials")
    return m.createDCRResult(invalid)
  end function

  public override function _regcode()

    'if apiVersion = "v3"
    '  dcrTokenResponse = m.initiateDCR()
    'end if
    token = m.initiateDCR()
    m.setInstance("adobeDCRToken", token)

    m.log.method("regCode_")
    ' <REGGIE_FQDN>/reggie/v1/{requestorId}/regcode
    requestPath = "/reggie/v1/" + m.requestorID + "/regcode"
    params = "deviceId=" + m.deviceId
    headers = {
      "Accept": "application/json"
      "Authorization": m.signRequest("POST", requestPath)
    }
    url = m.baseUrl + requestPath
    m.log.info("url ", url, "headers", headers, "params", params)

    request = m.getRequestUtil()
    result = request.post(url, params, headers)

    m.log.info("result is ", result)

    if result <> invalid and result.code <> invalid and result.code <> ""
      m.setSessionStoreValue(m.id, "regcode", result.code)
      return m.createRegCodeResult(result.code)
    end if

    m.log.error("Error retrieving regcode")
    m.setSessionStoreValue(m.id, "regcode", invalid)
    return m.createRegCodeResult(invalid, -1, "Unknown error")
  end function

  public override function _poll()
    m.log.method("poll_")
    ' <SP_FQDN>/api/v1/tokens/authn
    requestPath = "/api/v1/tokens/authn"
    headers = {
      "Accept": "application/json"
      "Authorization": m.signRequest("GET", requestPath)
    }
    params = {
      "requestor": m.requestorID
      "deviceId": m.deviceId
    }

    url = m.baseUrl + requestPath + "?" + m.uri.encodeParams(params)

    request = m.getRequestUtil()
    result = request.getJsonSync(url, headers)

    m.log.info("result is:", result)
    if result <> invalid and result.userId <> invalid and result.userId <> ""
      'store it, in case we need the user info, later
      m.pollResult = result
      m.log.info("valid userId getting authorization: ", result.userId)
      return m.getAuthorization()
    else
      m.log.info("invalid userId ignoring")
    end if

    result = m.createErrorResult("Unknown error")

    if request.lastResponseCode <> invalid
      if request.lastResponseCode = 404
        result.state = "none"
      else if request.lastResponseCode = 410
        ' 410 is expected if the authn token (i.e. reg code) has expired.  We take
        ' a strategic approach not to introduce a new auth state and raise it to
        ' the UI.  If it truly is expired, the 2nd screen will show that error
        ' message and the user can just refresh to get a new code.
        result.state = "none"
      end if
    end if

    return result
  end function

  public override function _logOut()
    ' <SP_FQDN>/api/v1/logout
    requestPath = "/api/v1/logout"

    headers = {
      "Accept": "application/json"
      "Authorization": m.signRequest("DELETE", requestPath)
    }
    params = {
      "deviceId": m.deviceId
    }

    request = m.getRequestUtil()

    url = m.baseUrl + requestPath + "?" + m.uri.encodeParams(params)
    request.delete(url, invalid, headers)

    return m.createAuthData()
  end function


  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ private impl
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  ''''''''''''''''''
  ' getAuthorization
  '
  '
  private function createDCRResult(registerAppResponse as mc.types.assocarray)
    m.log.method("createDCRResult_")
    requestPath = "/o/client/token"
    params = {
      "grant_type": "client_credentials",
      "client_id": registerAppResponse.data.client_id,
      "client_secret": registerAppResponse.data.client_secret,
    }
    headers = {
      "Content-Type": "application/x-www-form-urlencoded"
    }
    url = m.baseUrl + requestPath
    m.log.info("url ", url, "headers", headers, "params", params)

    request = m.getRequestUtil()
    result = request.post(url, params, headers)

    m.log.info("result is ", result)

    if result <> invalid and result.code <> invalid and result.code <> ""
      return m.createAccessToken(result.code)
    end if

    m.log.error("Error retrieving client credentials")
    return m.createAccessToken(invalid)
  end function

  private function getAuthorization()
    m.log.method("getAuthorization")
    ' <SP_FQDN>/api/v1/authorize
    requestPath = "/api/v1/authorize"
    headers = {
      "Accept": "application/json"
      "Authorization": m.signRequest("GET", requestPath)
    }
    params = {
      "requestor": m.requestorID
      "deviceId": m.deviceId
      "resource": m.getResourceText()
    }

    url = m.baseUrl + requestPath + "?" + m.uri.encodeParams(params)

    m.log.info("url is ", url)

    request = m.getRequestUtil()
    result = request.getJsonSync(url, headers)
    m.log.info("result: ", result)

    if result <> invalid and result.expires <> invalid and result.expires <> ""
      'TODO - not sure which of these is the token
      token = formatJson(result)

      if request.lastResponseCode <> invalid
        errorCode = request.lastResponseCode
      else
        errorCode = 0
      end if

      expireTime = mc.strToLong(result.expires) / 1000
      secondsTillExpire = m.date.getSecondsUntil(expireTime)

      if m.pollResult <> invalid
        user = m.pollResult
      else
        user = m.authData.user
      end if

      result.regCode = m.getSessionStoreValue(m.id, "regcode")
      return m.createAuthData("valid", token, token, token, result, secondsTillExpire, errorCode, "", user)
    end if

    return m.createErrorResult("Unknown error")
  end function

  'workaround for a bug where reusing the request get's the wrong response
  private function getRequestUtil()
    return new zapp.Request()
  end function

  private function signRequest(method, path, nonce = invalid, timestamp = 0)
    di = CreateObject("roDeviceInfo")
    if nonce = invalid
      nonce = di.GetRandomUUID()
    end if
    if timestamp = 0
      timestamp = CreateObject("roDateTime").AsSeconds()
    end if
    timeString = stri(timestamp, 10) + "000"
    stringToSign = method
    stringToSign += " requestor_id=" + m.requestorID
    stringToSign += ", nonce=" + nonce
    stringToSign += ", signature_method=HMAC-SHA1"
    stringToSign += ", request_time=" + timeString
    stringToSign += ", request_uri=" + path
    byteArray = CreateObject("roByteArray")
    byteArray.FromAsciiString(stringToSign)
    digest = CreateObject("roHMAC")
    privateKey = CreateObject("roByteArray")
    privateKey.fromAsciiString(m.secret)
    if digest.setup("sha1", privateKey) <> 0
      m.log.error("signRequest: failed to set up HMAC digest")
      return invalid
    end if
    signature = digest.process(byteArray)
    signatureBase64 = signature.toBase64String()
    header = stringToSign
    header += ", public_key=" + m.publicKey
    header += ", signature=" + signatureBase64
    return header
  end function

  private function getResourceText()
    selection = m.getInstance("currentSelection")
    isTemplateSupported = false
    if isTemplateSupported and selection <> invalid and selection.currentItem <> invalid
      content = selection.currentItem
      template = ReadAsciiFile("pkg:/source/AdobeAccessEnabler/adobeAuthorizationTemplate.xml")
      template = template.replace("{REQUESTOR_ID}", m.requestorID)
      template = template.replace("{ASSET_ID}", content.id)
      template = template.replace("{ASSET_NAME}", content.title)
      return template
    else
      return m.resourceID
    end if
  end function

  protected override function updateStateWithResult(result)
    m.log.info("storing cleeng key with quick brick flow in session")
    account = m._getAccountInfo()

    m.setInstance("quick-brick-login-flow-account", account)

    m.log.info("saved user account as quick-brick-login-flow-account", formatJson(account))
    m.setSessionStoreValue("AdobePrimetime", "token", result.jwt)
    m.setSessionStoreValue("quick-brick-login-flow", "token", result.jwt)
    m.setSessionStoreValue("quick-brick-login-flow", "account", account)
    return super.updateStateWithResult(result)
  end function

end class
