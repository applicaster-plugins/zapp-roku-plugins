import "pkg:/source/plugin-support/PluginManager.bs"
import "pkg:/source/lib/BaseClass.bs"
import "pkg:/source/roku_modules/maestro/core/Utils.brs"
import "pkg:/source/zapp/Reference.bs"


' /**
'  * @module GenericUrlTokenAppender
'  * @description appends the spcified token to the url
'  */
class GenericUrlTokenAppender extends zapp.BaseClass

  private namespaceName = ""
  private tokenKey = ""
  private isValid

  @injectClass("zapp.PluginManager")
  private plugins
  public function new()
    super("GenericUrlTokenAppender")

    plugin = m.plugins.getPluginById("generic_url_token_appender")

    if plugin.isValid
      m.namespaceName = plugin.getStringValue("provider_id", zapp.pipes.Namespaces.default)
      m.tokenKey = lcase(plugin.getStringValue("token_key", "token"))
    else
      m.log.error("There was no plugin config!")
    end if

    m.isValid = m.namespaceName <> "" and m.tokenKey <> ""

  end function

  public function execute()
    currentSelection = m.getInstance("currentSelection")

    url = mc.getPath(currentSelection, "currentItem.url", "")
    if url.trim() = ""
      m.log.error("there is no current item, or no url set")
      return "error"
    end if

    item = currentSelection.currentItem
    token = m.getSessionStoreValue(m.namespaceName, "token")

    if item.url.instr("?") = -1
      sep = "?"
    else
      sep = "&"
    end if

    item.url = item.url + sep + m.tokenKey + "=" + token
    return "success"
  end function

end class