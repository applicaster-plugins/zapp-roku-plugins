namespace zapp.tests
  @tags("public", "auth")
  @suite
  class AdobePrimetimeQuickBrickAuthPluginTests extends tests.BaseTestSuite

    private plugin

    protected override function beforeEach()
      super.beforeEach()
      pluginConfiguration = {
        "identifier": "AdobeAccessEnabler",
        "configuration_json": {
          publicKey: "pub"
          secret: "sec"
          requestor_id: "rqd"
          resource_id: "rod"
          base_url: "#url"
          software_statement: "ss"
          activation_url: "actUrl"
        }
      }

      mioc.setInstance("constants", { "applicasterDeviceId": "did" })

      plugin = new zapp.BasePlugin(pluginConfiguration)

      m.plugin = new AdobePrimetimeQuickBrickAuthPlugin(plugin)
    end function


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("constructor")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("testConstructor_tests")
    function _()
      m.assertEqual(m.plugin.JWTUtil.__className, "zapp.JWTUtil")
      m.assertEqual(m.plugin.uri.__className, "zapp.URI")
      m.assertEqual(m.plugin.requestorID, "rqd")
      m.assertEqual(m.plugin.resourceID, "rod")
      m.assertEqual(m.plugin.apiUrl, "#url")
      m.assertEqual(m.plugin.deviceId, "did")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getAccountInfo")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("getAccountInfo")
    function _()
      m.plugin.authData = {
        "user": {
          userId: "id"
        }
        rawAuthData: {
          regcode: "regcode"
        }
      }
      m.assertEqual(m.plugin._getAccountInfo(), {
        id: "id"
        email: "anonymous@anon.com"
        username: "anonymous"
        regCode: "regcode"
      })

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("verify")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("expired")
    function _()
      result = { "id": "result" }

      m.expectCalled(m.plugin.isAuthDataExpired(), true)
      m.expectNotCalled(m.plugin.getAuthorization())
      m.expectCalled(m.plugin.createErrorResult("Invalid token for verification"), result)

      m.assertEqual(m.plugin._verify(), result)
    end function

    @it("valid")
    function _()
      result = { "id": "result" }

      m.expectCalled(m.plugin.isAuthDataExpired(), false)
      m.expectCalled(m.plugin.getAuthorization(), result)

      m.expectNotCalled(m.plugin.createErrorResult)

      m.assertEqual(m.plugin._verify(), result)

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("regcode")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("valid")
    function _()
      m.expectCalled(m.plugin.initiateDCR(), "aut")
      m.expectCalled(m.plugin.setInstance("adobeDCRToken", "aut"))
      m.expectCalled(m.plugin.getInstance("adobeDCRToken"), "aut")

      requestUtil = { "id": "requestUtil" }
      m.expectCalled(m.plugin.getRequestUtil(), requestUtil)

      response = {
        "id": "0c0166e1-9596-4826-a6a4-85a19692d2f4"
        "code": "c"
      }
      expectedHeaders = {
        "Accept": "application/json"
        "Authorization": "Bearer aut"
      }

      url = "#url/reggie/v1/rqd/regcode"
      m.expectCalled(requestUtil.post(url, "deviceId=did", expectedHeaders), response)

      result = { "id": "result" }
      m.expectCalled(m.plugin.createRegCodeResult("c"), result)

      m.expectCalled(m.plugin.setSessionStoreValue(m.plugin.id, "regcode", "c"))

      m.assertEqual(m.plugin._regcode(), result)
    end function

    @it("invalid")
    @params(invalid)
    @params({})
    @params({ code: invalid })
    @params({ code: "" })
    function _(response)
      m.expectCalled(m.plugin.initiateDCR(), "aut")
      m.expectCalled(m.plugin.setInstance("adobeDCRToken", "aut"))
      m.expectCalled(m.plugin.getInstance("adobeDCRToken"), "aut")

      expectedHeaders = {
        "Accept": "application/json"
        "Authorization": "Bearer aut"
      }

      requestUtil = { "id": "requestUtil" }
      m.expectCalled(m.plugin.getRequestUtil(), requestUtil)

      url = "#url/reggie/v1/rqd/regcode"
      m.expectCalled(requestUtil.post(url, "deviceId=did", expectedHeaders), response)

      result = { "id": "result" }
      m.expectCalled(m.plugin.createRegCodeResult(invalid, -1, "Unknown error"), result)
      m.expectCalled(m.plugin.setSessionStoreValue(m.plugin.id, "regcode", invalid))

      m.assertEqual(m.plugin._regcode(), result)

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("poll")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("valid")
    function _()
      m.expectCalled(m.plugin.getInstance("adobeDCRToken"), "aut")
      expectedHeaders = {
        "Accept": "application/json"
        "Authorization": "Bearer aut"
      }

      url = "#url/api/v1/tokens/authn?deviceId=did&requestor=rqd"
      response = { "id": "result", "userId": "uid" }

      requestUtil = { "id": "requestUtil" }
      m.expectCalled(m.plugin.getRequestUtil(), requestUtil)
      m.expectCalled(requestUtil.getJsonSync(url, expectedHeaders), response)

      result = { "id": "result" }
      m.expectCalled(m.plugin.getAuthorization(), result)

      m.assertEqual(m.plugin._poll(), result)
    end function

    @it("failure")
    @params(invalid, invalid, "error")
    @params(invalid, 400, "error")
    @params({ "userId": invalid }, 403, "error")
    @params({ "userId": "" }, 404, "none")
    @params({ "otherField": "value" }, 410, "none")
    function _(response, responseCode, expectedState)
      m.expectCalled(m.plugin.getInstance("adobeDCRToken"), "aut")
      expectedHeaders = {
        "Accept": "application/json"
        "Authorization": "Bearer aut"
      }
      requestUtil = {
        "id": "requestUtil"
        lastResponseCode: responseCode
      }
      m.expectCalled(m.plugin.getRequestUtil(), requestUtil)


      url = "#url/api/v1/tokens/authn?deviceId=did&requestor=rqd"
      m.expectCalled(requestUtil.getJsonSync(url, expectedHeaders), response)

      result = { "id": "result", "state": "error" }
      m.expectCalled(m.plugin.createErrorResult("Unknown error"), result)

      m.assertEqual(m.plugin._poll(), result)

      m.assertEqual(result.state, expectedState)

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("logout")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("logout")
    function _()
      m.expectCalled(m.plugin.getInstance("adobeDCRToken"), "aut")
      expectedHeaders = {
        "Accept": "application/json"
        "Authorization": "Bearer aut"
      }

      requestUtil = { "id": "requestUtil" }
      m.expectCalled(m.plugin.getRequestUtil(), requestUtil)

      url = "#url/api/v1/logout?deviceId=did"
      m.expectCalled(requestUtil.delete(url, invalid, expectedHeaders))

      result = { "id": "result" }
      m.expectCalled(m.plugin.createAuthData(), result)

      m.assertEqual(m.plugin._logOut(), result)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("initiateDCR")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("initiateDCR")
    function _()
      expectedHeaders = {
        "Content-Type": "application/json"
        "X-Device-Info": "eyJtYW51ZmFjdHVyZXIiOiJSb2t1IiwibW9kZWwiOiJSb2t1Iiwib3NOYW1lIjoiUm9rdSIsIm9zVmVyc2lvbiI6Ijk5OS45OUU5OTk5OUEiLCJ2ZW5kb3IiOiJSb2t1IiwidmVyc2lvbiI6IjM4MTBYIn0="
        "User-Agent": "Roku"
      }

      expectedParams = {
        "software_statement": "ss"
      }

      response = {
        "client_id": "s6BhdRkqt3",
        "client_secret": "t7AkePiru4",
        "client_id_issued_at": 2893256800,
        "redirect_uris": [
        "app://com.programmer.adobe#sdasdsadas"],
        "grant_types": ["client_credentials"]
      }

      requestUtil = { "id": "requestUtil" }
      m.expectCalled(m.plugin.getRequestUtil(), requestUtil)

      url = "#url/o/client/register"
      m.expectCalled(requestUtil.post(url, expectedParams, expectedHeaders), response)

      result = { "id": "result" }
      m.expectCalled(m.plugin.createDCRResult(response), result)

      m.assertEqual(m.plugin.initiateDCR(), result)
    end function

    @it("invalid")
    @params(invalid)
    @params({})
    @params({ code: invalid })
    @params({ code: "" })
    function _(response)
      expectedHeaders = {
        "Content-Type": "application/json"
        "X-Device-Info": "eyJtYW51ZmFjdHVyZXIiOiJSb2t1IiwibW9kZWwiOiJSb2t1Iiwib3NOYW1lIjoiUm9rdSIsIm9zVmVyc2lvbiI6Ijk5OS45OUU5OTk5OUEiLCJ2ZW5kb3IiOiJSb2t1IiwidmVyc2lvbiI6IjM4MTBYIn0="
        "User-Agent": "Roku"
      }
      expectedParams = {
        "software_statement": "ss"
      }

      requestUtil = { "id": "requestUtil" }
      m.expectCalled(m.plugin.getRequestUtil(), requestUtil)

      url = "#url/o/client/register"
      m.expectCalled(requestUtil.post(url, expectedParams, expectedHeaders), response)

      m.expectCalled(m.plugin.createDCRResult(invalid), invalid)

      m.assertInvalid(m.plugin.initiateDCR())
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("createDCRResult")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("createDCRResult valid")
    function _()
      registerAppResponse = {
        "client_id": "s6BhdRkqt3",
        "client_secret": "t7AkePiru4",
        "client_id_issued_at": 2893256800,
        "redirect_uris": [
        "app://com.programmer.adobe#sdasdsadas"],
        "grant_types": ["client_credentials"]
      }
      expectedParams = {
        "grant_type": "client_credentials",
        "client_id": registerAppResponse.client_id,
        "client_secret": registerAppResponse.client_secret,
      }
      expectedResponse = {
        "access_token": "2YotnFZFEjr1zCsicMWpAA",
        "token_type": "bearer",
        "expires_in": 3600,
        "created_at": 123456789
      }

      m.expectCalled(m.plugin.executeAPIRequest("FORMPOST", "/o/client/token", expectedParams), expectedResponse)

      m.assertEqual(m.plugin.createDCRResult(registerAppResponse), expectedResponse.access_token)
    end function

    @it("createDCRResult invalid result")
    @params(invalid)
    @params({})
    @params({ code: invalid })
    @params({ code: "" })
    function _(response)
      registerAppResponse = {
        "client_id": "s6BhdRkqt3",
        "client_secret": "t7AkePiru4",
        "client_id_issued_at": 2893256800,
        "redirect_uris": [
        "app://com.programmer.adobe#sdasdsadas"],
        "grant_types": ["client_credentials"]
      }
      expectedParams = {
        "grant_type": "client_credentials",
        "client_id": registerAppResponse.client_id,
        "client_secret": registerAppResponse.client_secret,
      }

      m.expectCalled(m.plugin.executeAPIRequest("FORMPOST", "/o/client/token", expectedParams), response)

      m.assertInvalid(m.plugin.createDCRResult(registerAppResponse))
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getResourceText")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("no selection")
    @params(invalid)
    @params({ "currentItem": invalid })
    function _(currentSelection)
      m.expectCalled(m.plugin.getInstance("currentSelection"), currentSelection)

      text = m.plugin.getResourceText()
      m.assertEqual(text, "rod")
    end function

    @it("with selection")
    function _()
      m.expectOnce(m.plugin, "getInstance", ["currentSelection"], { "currentItem": { "id": "id1", "title": "t1" } })

      text = m.plugin.getResourceText()
      ' expected = "<rss"
      ' expected += chr(10) + "    version=""2.0"""
      ' expected += chr(10) + "    xmlns:media=""http://search.yahoo.com/mrss/"">"
      ' expected += chr(10) + "  <channel>"
      ' expected += chr(10) + "    <title>rqd</title>"
      ' expected += chr(10) + "    <item>"
      ' expected += chr(10) + "      <title>t1</title>"
      ' expected += chr(10) + "      <guid>id1</guid>"
      ' expected += chr(10) + "    </item>"
      ' expected += chr(10) + "  </channel>"
      ' expected += chr(10) + "</rss>"

      expected = "rod"
      m.assertEqual(text, expected)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getAuthorization")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("getAuthorization")
    @params(invalid, 0)
    @params(404, 404)
    @params(503, 503)
    function _(lastResponseCode, expectedCode)
      m.expectCalled(m.plugin.initiateDCR(), "aut")
      m.expectCalled(m.plugin.setInstance("adobeDCRToken", "aut"))
      m.expectCalled(m.plugin.getInstance("adobeDCRToken"), "aut")

      expectedHeaders = {
        "Accept": "application/json"
        "Authorization": "Bearer aut"
      }
      url = "#url/api/v1/authorize?deviceId=did&requestor=rqd&resource=rod"

      requestUtil = { "id": "requestUtil"
        lastResponseCode: lastResponseCode
      }

      response = {
        "expires": "1589402085000"
      }
      m.expectCalled(m.plugin.getResourceText(), "rod")
      m.expectCalled(m.plugin.getRequestUtil(), requestUtil)
      m.expectCalled(requestUtil.getJsonSync(url, expectedHeaders), response)
      m.expectCalled(m.plugin.date.getSecondsUntil(mc.strToLong("1589402085000") / 1000), 9999)
      m.plugin.pollResult = { "id": "pollResult" }

      result = {
        "id": "result"
      }
      token = formatJson(response)
      m.expectCalled(m.plugin.createAuthData("valid", token, token, token, response, 9999, expectedCode, "", m.plugin.pollResult), result)

      m.expectNotCalled(m.plugin.createErrorResult)

      m.assertEqual(m.plugin.getAuthorization(), result)
    end function

    @it("fail")
    @params(invalid)
    @params({})
    @params({ "expires": invalid })
    @params({ "expires": "" })
    function _(response)
      m.expectCalled(m.plugin.initiateDCR(), "aut")
      m.expectCalled(m.plugin.setInstance("adobeDCRToken", "aut"))
      m.expectCalled(m.plugin.getInstance("adobeDCRToken"), "aut")

      requestUtil = { "id": "requestUtil" }

      expectedHeaders = {
        "Accept": "application/json"
        "Authorization": "Bearer aut"
      }
      url = "#url/api/v1/authorize?deviceId=did&requestor=rqd&resource=rod"

      m.expectCalled(m.plugin.getResourceText(), "rod")
      m.expectCalled(m.plugin.getRequestUtil(), requestUtil)
      m.expectCalled(requestUtil.getJsonSync(url, expectedHeaders), response)

      result = { "id": "result" }
      m.expectNotCalled(m.plugin.createAuthData)
      m.expectCalled(m.plugin.createErrorResult("Unknown error"), result)

      m.assertEqual(m.plugin.getAuthorization(), result)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @ignore
    @describe("integration Tests")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @beforeEach
    function integration_beforeEach()
      m.beforeEach()
      'these tests, store information in the session store
      'so we need to make one
      sessionStore = mc.createSGNode("ZSessionStore")
      mioc.setInstance("zp_sessionStore", sessionStore)
    end function

    @it("test initiateDCR")
    function _()
      m.plugin.softwareStatement = "eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIyZTFkZGU4Mi05MDk3LTQ1YjYtOTRlMS0wOGVmODE2MDRjNDUiLCJuYmYiOjE2NjYyODcyMTksImlzcyI6ImF1dGguYWRvYmUuY29tIiwiaWF0IjoxNjY2Mjg3MjE5fQ.AYRUReMHeloopGW9a5vk1xNlmk8cQd2B_6Vo61pCb2ROPvMj7qFfbaxqvjNlR3gYro4MMc1FxISniAFL-DrBvx7n8sQ8z4z3ryWnz9kMVaM1WX7VddH5KXZFkhf4NFtIdquG1OrsG1DfLyIiRQ9BO6CmruWnoB3h1euUxr8JKcaiApgb3eP5oKhq-fwLxuPJopv5zGaCwW4EdHI6_l4Qa7XPMkOTAbFxQed5MR-s7XBQ2mGqpi1sEHoVDxnkeW5wdHoj2R51_eNHdB4ej-u6eHfJ9vX5T_Q5NmZqNtmyZOHLhyqEUN7_zioIbEbUNRAMics2-Yet9l08rJ0OhdX45Q"
      m.plugin.buildConfig = { "app_family_id": "542" }

      'm.plugin.baseUrl = "https://sp.auth.adobe.com/adobe-services"
      m.plugin.apiUrl = "https://api.auth.adobe.com"
      result = m.plugin.initiateDCR()
    end function

    @it("test regcode")
    function _()
      m.plugin.softwareStatement = "eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIyZTFkZGU4Mi05MDk3LTQ1YjYtOTRlMS0wOGVmODE2MDRjNDUiLCJuYmYiOjE2NjYyODcyMTksImlzcyI6ImF1dGguYWRvYmUuY29tIiwiaWF0IjoxNjY2Mjg3MjE5fQ.AYRUReMHeloopGW9a5vk1xNlmk8cQd2B_6Vo61pCb2ROPvMj7qFfbaxqvjNlR3gYro4MMc1FxISniAFL-DrBvx7n8sQ8z4z3ryWnz9kMVaM1WX7VddH5KXZFkhf4NFtIdquG1OrsG1DfLyIiRQ9BO6CmruWnoB3h1euUxr8JKcaiApgb3eP5oKhq-fwLxuPJopv5zGaCwW4EdHI6_l4Qa7XPMkOTAbFxQed5MR-s7XBQ2mGqpi1sEHoVDxnkeW5wdHoj2R51_eNHdB4ej-u6eHfJ9vX5T_Q5NmZqNtmyZOHLhyqEUN7_zioIbEbUNRAMics2-Yet9l08rJ0OhdX45Q"
      m.plugin.buildConfig = { "app_family_id": "542" }
      m.plugin.requestorID = "BEINSPORT"
      m.plugin.deviceId = "6d7e67738fa8144f7d513dd90d3f4af820690526"
      'm.plugin.baseUrl = "https://sp.auth.adobe.com/adobe-services"
      m.plugin.apiUrl = "https://api.auth.adobe.com"
      result = m.plugin._regcode()
    end function

  end class
end namespace