import "pkg:/source/analytics/BaseAnalyticsPlugin.bs"
import "pkg:/source/video/analytics/VideoAnalyticsEvent.bs"
import "pkg:/source/video/analytics/AnalyticsEvent.bs"
import "pkg:/source/zapp-analytics-plugin-braze/BrazeSDK.bs"

class BrazeAnalyticsPlugin extends zapp.analytics.BaseAnalyticsPlugin

  private brazeInstance = invalid
  private brazeTask = invalid
  private taskName = "BrazeTask"
  private isPluginEnabled = false
  private apiKey = ""
  private dataEndpoint = "https://sdk.iad-01.braze.com/"
  private heartBeatFreq = 5

  @inject("currentSelection")
  private currentSelection

  public function new(plugin = invalid)
    super("BrazeAnalyticsPlugin", m.getPlugin(plugin))

    m.isPluginEnabled = m.plugin.getBoolValue("enabled")
    m.apiKey = m.plugin.getStringValue("api_key")
    m.dataEndpoint = m.plugin.getStringValue("braze_endpoint")
    m.heartBeatFreq = m.plugin.getIntValue("heartbeat_freq_in_seconds", 5)

    config = {}
    config_fields = BrazeConstants().BRAZE_CONFIG_FIELDS
    config[config_fields.API_KEY] = m.apiKey
    config[config_fields.ENDPOINT] = m.dataEndpoint
    config[config_fields.HEARTBEAT_FREQ_IN_SECONDS] = m.heartBeatFreq
    m.brazeTask = m.getInstance("brazeAnalyticsTask")

    if m.brazeTask = invalid
      m.log.warn("Creating new braze Task")
      m.brazeTask = m.createInstance(m.taskName)
      mc.setOrAddNodeField(m.brazeTask, "brazeConfig", config)
      m.brazeTask.control = "RUN"
      m.brazeInstance = getBrazeInstance(m.brazeTask)
      m.setInstance("brazeAnalyticsTask", m.brazeTask)
      m.observeNodeField(m.brazeTask, "brazeInAppMessage", m.onInAppMessageTriggered, "value")
      m.observeNodeField(m.brazeTask, "brazeFeatureFlagsUpdated", m.onFeatureFlagChanges, "value")
    else
      m.brazeTask.setField("brazeConfig", config)
    end if

  end function

  private function getPlugin(plugin = invalid)
    if plugin = invalid
      pluginManager = new zapp.PluginManager()
      plugin = pluginManager.getPluginById("zapp-analytics-plugin-braze")
    end if

    return plugin
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ overridden methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public override function onVideoAnalyticsEvent(event as zapp.analytics.AnalyticsEvent) as void
    m.log.info("this plugin does not have a Braze analytics task, using the shared instance")
    m.processAnalyticsEvent(event)
  end function

  protected override function _identify(pluginId, traits = {}, options = {}, isFromLogout = false) as boolean
    m.log.info("identify", pluginId)
    if m.isPluginEnabled

      if pluginId <> invalid
        accountInfo = m.getSessionStoreValue(pluginId, "user_id")
      else
        accountInfo = invalid
      end if

      m.log.info("identify accountInfo", accountInfo)

      if accountInfo <> invalid
        if asString(accountInfo, invalid) <> invalid
          m.log.info("identifying analytics with the userId", accountInfo, "for plugin:", pluginId)
          m.log.info("recrating BrazeAnalyticsPlugin with the userId", accountInfo, "for plugin:", pluginId)
          m.setUserId(accountInfo)
        else
          m.log.error("identify called; but there id was empty!")
          m.identifyAsAnonymous()
        end if
      else
        m.log.warn("identify called; but there is no logged in user; point to unidentify, to get anonymous analytics")
        m.identifyAsAnonymous()
      end if
    end if
    return true
  end function

  private function identifyAsAnonymous()
    m.log.info("identifying as anonymous user")
    m.setUserId(invalid)
  end function

  function setUserId(accountInfoId)
    if m.brazeTask <> invalid and accountInfoId <> invalid
      brazeInstance = m.brazeInstance
      brazeInstance.setUserId(accountInfoId)
    end if
  end function

  protected override function _trackVideoEvent(event as zapp.video.VideoAnalyticsEvent)
    m.processAnalyticsEvent(event)
  end function

  protected override function _processAnalyticsEvent(event as zapp.analytics.AnalyticsEvent)
    m.log.info("processAnalyticsEvent")
    if m.brazeTask <> invalid
      brazeInstance = m.brazeInstance
      if event.id.startsWith("purchase")
        item = m.getInstance("currentStoreItemSelected")
        purchaseData = {
          purchaseName: asString(item.json.rokuproduct.code)
          currency: asString(item.json.rokuproduct.currency, "USD")
          price: asFloat(item.json.rokuproduct.cost)
          quantity: asInteger(item.json.rokuproduct.quantity, 1)
        }
        event.purchaseData = purchaseData
        m.logBrazePurchase(brazeInstance, event, event.properties)
      else
        brazeInstance.logEvent(event.id, event.properties)
      end if
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ private methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function onInAppMessageTriggered(value)
    in_app_message = m.BrazeTask.BrazeInAppMessage
    if in_app_message <> invalid and in_app_message.message <> invalid
      if in_app_message.extras <> invalid and in_app_message.extras.msgtype = "sidebyside"
        customMsg = CreateObject("roSGNode", "CustomSideBySideInAppMessage")
        m.getMField("top").getScene().appendChild(customMsg)
        customMsg.BrazeTask = m.BrazeTask
        customMsg.inappmessage = in_app_message
        customMsg.setFocus(true)
        customMsg.ObserveField("isClosed", "reclaimFocus")
      else
        ' Our default In App Message. This happens to be based on a Roku Dialog
        dialog = createObject("roSGNode", "BrazeInAppMessage")
        dialog.BrazeTask = m.BrazeTask
        dialog.inappmessage = in_app_message
        m.getMField("top").getScene().dialog = dialog
      end if
      m.BrazeTask.BrazeInAppMessage = invalid
    end if
  end function

  function onFeatureFlagChanges(value)
    print "On FeatureFlag Changes()"
    brazeInstance = m.brazeInstance

    ff = brazeInstance.getFeatureFlag("theme")
  end function

  function logBrazePurchase(brazeInstance, purchase, properties)
    brazeInstance.logPurchase(purchase.purchaseData.purchaseName, purchase.purchaseData.currency, purchase.purchaseData.price, purchase.purchaseData.quantity, properties)
  end function


end class

