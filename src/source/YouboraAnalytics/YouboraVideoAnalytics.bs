import "pkg:/source/lib/BaseClass.bs"
import "pkg:/source/video/analytics/BaseVideoAnalyticsPlugin.bs"
import "pkg:/source/video/analytics/VideoAnalyticsEvent.bs"
import "pkg:/source/analytics/AnalyticsEventMapper.bs"

class YouboraVideoAnalytics extends zapp.video.BaseVideoAnalyticsPlugin
  ' Example Config:
  ' {
  ' "accountCode" : "nicetest", 'This is the only mandatory param
  ' "user" : "userid", ' this should be the signed in user id, according to adobe primetime
  ' "expectAds": "true",
  ' "content.transactionCode" : "transaction_id",
  ' "content.metadata" : {
  ' "firstProperty": "firstValue",
  '   "secondProperty": "secondValue"
  '   "year": "2001",
  '   "genre": "Fantasy",
  '   "price": "free
  ' },
  ' "content.resource" : "http://example.com/batman_movie.m3u8",
  ' "content.duration" : 4000,
  ' "content.isLive" : false,
  ' "content.title" : "Batman",
  ' "content.rendition" : "4.2Mbps",
  ' "content.cdn" : "AKAMAI",

  ' "network.ip" : "48.151.62.3",
  ' "network.isp" : "Verizon"

  ' "param1" : "Param 1 Value",
  ' "param2" : "Param 2 Value",
  ' "param3" : "Param 3 Value",
  ' "param4" : "Param 4 Value",
  ' "param5" : "Param 5 Value",
  ' "param6" : "Param 6 Value",
  ' "param7" : "Param 7 Value",
  ' "param8" : "Param 8 Value",
  ' "param9" : "Param 9 Value",
  ' "param10" : "Param 10 Value",
  ' "param11" : "Param 11 Value",
  ' "param12" : "Param 12 Value",
  ' "param13" : "Param 13 Value",
  ' "param14" : "Param 14 Value",
  ' "param15" : "Param 15 Value",
  ' "param16" : "Param 16 Value",
  ' "param17" : "Param 17 Value",
  ' "param18" : "Param 18 Value",
  ' "param19" : "Param 19 Value",
  ' "param20" : "Param 20 Value",
  ' "device.code" : "DEVICE_ID"
  ' }

  private analyticsMapper as zapp.analytics.AnalyticsEventMapper
  private youboraTask = invalid
  private config = {}
  private taskName = "YBPluginRokuVideo"
  private user = invalid
  private isUsingAdvancedVideoAnalytics = false
  private contentMetricPath = {}

  @inject("buildConfig")
  private buildConfig

  public function new(plugin = invalid)
    super("YouboraVideoAnalytics")
    plugin = m.getPlugin(plugin)
    m.analyticsMapper = m.createMapper(plugin)

    m.taskName = plugin.getStringValue("task_name", "YBPluginRokuVideo")

    m.config = {
      "accountCode": plugin.getStringValue("account_code")
      "expectAds": plugin.getBoolValue("expect_ads")
      "enableDebug": plugin.getBoolValue("is_debug")
    }

    m.contentMetricPath = {
      "cdn": plugin.getStringValue("cdn")
      "title": plugin.getStringValue("title")
      "isLive": plugin.getStringValue("is_live")
      "contentId": plugin.getStringValue("content_id")
      "contentProgram": plugin.getStringValue("content_program")
      "contentChannel": plugin.getStringValue("content_channel")
      "contentType": plugin.getStringValue("content_type")
      "contentGenre": plugin.getStringValue("content_genre")
      "contentSeason": plugin.getStringValue("content_season")
      "contentEpisodeTitle": plugin.getStringValue("content_episode_title")
      "customDimension1": plugin.getStringValue("custom_dimension_1")
      "customDimension2": plugin.getStringValue("custom_dimension_2")
      "customDimension3": plugin.getStringValue("custom_dimension_3")
      "customDimension4": plugin.getStringValue("custom_dimension_4")
      "customDimension5": plugin.getStringValue("custom_dimension_5")
      "customDimension6": plugin.getStringValue("custom_dimension_6")
      "contentPlaybackType": plugin.getStringValue("content_playback_type")
      "contentTVShow": plugin.getStringValue("content_tv_show")
      "contentResource": plugin.getStringValue("content_resource")
    }
    m.isUsingAdvancedVideoAnalytics = plugin.getBoolValue("use_advanced_video_analytics")
    m.user = m.getSessionStoreValue("quick-brick-login-flow", "user_id")
  end function

  private function getPlugin(plugin = invalid)
    if plugin = invalid
      pluginManager = new zapp.PluginManager()
      plugin = pluginManager.getPluginById("YouboraAnalytics")
    end if

    return plugin
  end function


  public override function videoStart(videoNode, contentNode) as void
    super.videoStart(videoNode, contentNode)
    m.log.info("video starting", contentNode.title)

    m.contentNode = contentNode
    videoOptions = m.setVideoOptions(contentNode)
    m.youboraTask = m.getInstance("youboraAnalyticsTask")

    if m.youboraTask = invalid
      m.log.warn("Creating new Youbora Task")
      m.youboraTask = m.createInstance(m.taskName, videoNode, "youboraAnalyticsTask")
      m.youboraTask.videoplayer = videoNode
      m.log.info("Sending payload to Youbora ", videoOptions)
      m.youboraTask.options = videoOptions
      m.youboraTask.control = "RUN"
      m.setInstance("youboraAnalyticsTask", m.youboraTask)
    else
      m.youboraTask.videoplayer = videoNode
      m.youboraTask.options = videoOptions
    end if

    if m.isUsingAdvancedVideoAnalytics
      m.log.warn("Using advanced video analytics")
      return
    end if
    'note if we're using 6.1 or higher, that we should do a "init" event here
    'current SDK is 6.0.4
    m.youboraTask.event = { handler: "play" }
  end function

  public override function videoEnd() as void
    super.videoEnd()
    m.log.info("video session ending")

    if m.isUsingAdvancedVideoAnalytics
      m.log.warn("Using advanced video analytics")
      return
    end if

    m.youboraTask = m.getInstance("youboraAnalyticsTask")

    if m.youboraTask <> invalid
      m.log.info("Stopping Youbora Task")
      m.youboraTask.event = { handler: "stop" }
      m.youboraTask.taskState = "stop"
      m.youboraTask.control = "done"
      m.youboraTask = invalid
      m.setInstance("youboraAnalyticsTask", m.youboraTask)
    else
      m.log.warn("No Youbora Task to stop")
    end if
  end function

  public override function screenOpen(contentNode) as void
    super.screenOpen(contentNode)
    m.log.info("screen opening")
    videoOptions = m.setVideoOptions(contentNode)

    m.youboraTask = m.getInstance("youboraAnalyticsTask")

    if m.youboraTask = invalid
      m.log.warn("Creating new Youbora Task")
      m.youboraTask = m.createInstance(m.taskName, invalid, "youboraAnalyticsTask")
      m.log.info("Sending payload to Youbora ", videoOptions)
      m.youboraTask.options = videoOptions
      m.youboraTask.control = "RUN"
      m.setInstance("youboraAnalyticsTask", m.youboraTask)
    else
      m.youboraTask.options = videoOptions
    end if

    m.youboraTask.session = {
      "ev": "start"
      "sc": "VideoScene"
      "dim": { "title": "menuItemTitle" }
    }
  end function

  public override function adBreakStart() as void
    super.adBreakStart()
  end function

  public override function adBreakEnd()
    super.adBreakEnd()
  end function

  public override function adTrackingEvent(eventType, rafCtx) as void
    super.adTrackingEvent(eventType, rafCtx)
    m.log.method("adTrackingEvent")

    if m.isUsingAdvancedVideoAnalytics
      return
    end if
    if m.youboraTask <> invalid
      m.youboraTask.adevent = parseJson(formatJson(rafCtx))
    end if
  end function

  public override function onVideoAnalyticsEvent(event as zapp.video.VideoAnalyticsEvent)
    if m.isUsingAdvancedVideoAnalytics
      mappedAnalyticEvent = m.analyticsMapper.map(event)
      if mappedAnalyticEvent <> invalid
        m.youboraTask.adevent = parseJson(formatJson({
          id: event.id
          name: event.name
          properties: event.properties
        }))
      end if
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function setVideoOptions(contentNode)
    contentMetricPath = m.contentMetricPath
    contentNodeJson = asAA(contentNode.json)
    videoOptions = {}
    videoOptions.content = {
      "title": mc.getPath(contentNodeJson, contentMetricPath.title, contentNode.title)
      "cdn": mc.getPath(contentNodeJson, contentMetricPath.cdn, "")
      "name": `${m.buildConfig.app_name}`
      "user_id": asString(m.user)
      "app_release_version": `${m.buildConfig.version_name} ${m.buildConfig.build_version}`
      "app_version_number": m.buildConfig.version_name
      "isLive": mc.getPath(contentNodeJson, contentMetricPath.isLive, false)
      "id": mc.getPath(contentNodeJson, contentMetricPath.contentId, "")
      "program": mc.getPath(contentNodeJson, contentMetricPath.contentProgram, "")
      "channel": mc.getPath(contentNodeJson, contentMetricPath.contentChannel, "")
      "type": mc.getPath(contentNodeJson, contentMetricPath.contentType, "")
      "genre": mc.getPath(contentNodeJson, contentMetricPath.contentGenre, "")
      "season": mc.getPath(contentNodeJson, contentMetricPath.contentSeason, "")
      "episodeTitle": mc.getPath(contentNodeJson, contentMetricPath.contentEpisodeTitle, "")
      "customDimension1": mc.getPath(contentNodeJson, contentMetricPath.customDimension1, "")
      "customDimension2": mc.getPath(contentNodeJson, contentMetricPath.customDimension2, "")
      "customDimension3": mc.getPath(contentNodeJson, contentMetricPath.customDimension3, "")
      "customDimension4": mc.getPath(contentNodeJson, contentMetricPath.customDimension4, "")
      "customDimension5": mc.getPath(contentNodeJson, contentMetricPath.customDimension5, "")
      "customDimension6": mc.getPath(contentNodeJson, contentMetricPath.customDimension6, "")
      "playbackType": mc.getPath(contentNodeJson, contentMetricPath.contentPlaybackType, "")
      "tvShow": mc.getPath(contentNodeJson, contentMetricPath.contentTVShow, "")
      "contentResource": mc.getPath(contentNodeJson, contentMetricPath.contentResource, "")
    }
    videoOptions.app = {
      "name": `${m.buildConfig.app_name}`
    }
    videoOptions.username = asString(m.user)

    videoOptions.append(m.config)

    return videoOptions
  end function

  private function createMapper(plugin) as zapp.analytics.AnalyticsEventMapper
    return new zapp.analytics.AnalyticsEventMapper(asAny(plugin.json.configuration_json.events_mapper))
  end function

end class