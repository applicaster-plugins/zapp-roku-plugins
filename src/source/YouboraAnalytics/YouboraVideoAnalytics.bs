import "pkg:/source/lib/BaseClass.bs"
import "pkg:/source/video/analytics/BaseVideoAnalyticsPlugin.bs"
import "pkg:/source/video/analytics/VideoAnalyticsEvent.bs"
import "pkg:/source/analytics/AnalyticsEventMapper.bs"

class YouboraVideoAnalytics extends zapp.video.BaseVideoAnalyticsPlugin
  ' Example Config:
  ' {
  ' "accountCode" : "nicetest", 'This is the only mandatory param
  ' "user" : "userid", ' this should be the signed in user id, according to adobe primetime
  ' "expectAds": "true",
  ' "content.transactionCode" : "transaction_id",
  ' "content.metadata" : {
  ' "firstProperty": "firstValue",
  '   "secondProperty": "secondValue"
  '   "year": "2001",
  '   "genre": "Fantasy",
  '   "price": "free
  ' },
  ' "content.resource" : "http://example.com/batman_movie.m3u8",
  ' "content.duration" : 4000,
  ' "content.isLive" : false,
  ' "content.title" : "Batman",
  ' "content.rendition" : "4.2Mbps",
  ' "content.cdn" : "AKAMAI",

  ' "network.ip" : "48.151.62.3",
  ' "network.isp" : "Verizon"

  ' "param1" : "Param 1 Value",
  ' "param2" : "Param 2 Value",
  ' "param3" : "Param 3 Value",
  ' "param4" : "Param 4 Value",
  ' "param5" : "Param 5 Value",
  ' "param6" : "Param 6 Value",
  ' "param7" : "Param 7 Value",
  ' "param8" : "Param 8 Value",
  ' "param9" : "Param 9 Value",
  ' "param10" : "Param 10 Value",
  ' "param11" : "Param 11 Value",
  ' "param12" : "Param 12 Value",
  ' "param13" : "Param 13 Value",
  ' "param14" : "Param 14 Value",
  ' "param15" : "Param 15 Value",
  ' "param16" : "Param 16 Value",
  ' "param17" : "Param 17 Value",
  ' "param18" : "Param 18 Value",
  ' "param19" : "Param 19 Value",
  ' "param20" : "Param 20 Value",
  ' "device.code" : "DEVICE_ID"
  ' }

  private analyticsMapper as zapp.analytics.AnalyticsEventMapper
  private youboraTask = invalid
  private config = {}
  private taskName = "YBPluginRokuVideo"
  private isUsingAdvancedVideoAnalytics = false

  public function new(plugin = invalid)
    super("YouboraVideoAnalytics")
    plugin = m.getPlugin(plugin)
    m.analyticsMapper = m.createMapper(plugin)

    m.taskName = plugin.getStringValue("task_name", "YBPluginRokuVideo")

    m.config = {
      "accountCode": plugin.getStringValue("account_code")
      "expectAds": plugin.getBoolValue("expect_ads")
      "enableDebug": plugin.getBoolValue("is_debug")
    }
    m.isUsingAdvancedVideoAnalytics = plugin.getBoolValue("use_advanced_video_analytics")
  end function

  private function getPlugin(plugin = invalid)
    if plugin = invalid
      pluginManager = new zapp.PluginManager()
      plugin = pluginManager.getPluginById("YouboraAnalytics")
    end if

    return plugin
  end function


  public override function videoStart(videoNode, contentNode) as void
    super.videoStart(videoNode, contentNode)

    m.contentNode = contentNode
    m.youboraTask = m.getInstance("youboraAnalyticsTask")

    if m.youboraTask = invalid
      m.youboraTask = m.createInstance(m.taskName, videoNode, "youboraAnalyticsTask")
      m.youboraTask.videoplayer = videoNode
      m.youboraTask.control = "RUN"
      m.setInstance("youboraAnalyticsTask", m.youboraTask)
    end if

    if m.isUsingAdvancedVideoAnalytics
      return
    end if
    videoOptions = {}
    videoOptions.content = {
      "title": contentNode.title,
      "isLive": contentNode.LIVE = true
    }
    videoOptions.append(m.config)
    m.log.info("Sending payload to Youbora ", videoOptions)
    m.youboraTask.options = videoOptions

    'note if we're using 6.1 or higher, that we should do a "init" event here
    'current SDK is 6.0.4
    m.youboraTask.event = { handler: "play" }
  end function

  public override function videoEnd() as void
    m.log.method("videoEnd")
    super.videoEnd()

    if m.isUsingAdvancedVideoAnalytics
      return
    end if
    if m.youboraTask <> invalid
      m.youboraTask.event = { handler: "stop" }
      m.youboraTask.taskState = "stop"
    end if
  end function

  public override function adBreakStart() as void
    super.adBreakStart()
  end function

  public override function adBreakEnd()
    super.adBreakEnd()
  end function

  public override function adTrackingEvent(eventType, rafCtx) as void
    m.log.method("adTrackingEvent")
    super.adTrackingEvent(eventType, rafCtx)

    if m.isUsingAdvancedVideoAnalytics
      return
    end if
    if m.youboraTask <> invalid
      m.youboraTask.adevent = parseJson(formatJson(rafCtx))
    end if
  end function

  public override function onVideoAnalyticsEvent(event as zapp.video.VideoAnalyticsEvent)
    if m.isUsingAdvancedVideoAnalytics
      mappedAnalyticEvent = m.analyticsMapper.map(event)
      if mappedAnalyticEvent <> invalid
        m.youboraTask.adevent = parseJson(formatJson({
          id: event.id
          name: event.name
          properties: event.properties
        }))
      end if
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function createMapper(plugin) as zapp.analytics.AnalyticsEventMapper
    return new zapp.analytics.AnalyticsEventMapper(asAny(plugin.json.configuration_json.events_mapper))
  end function

end class