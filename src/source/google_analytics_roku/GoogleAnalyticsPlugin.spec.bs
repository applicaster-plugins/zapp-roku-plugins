namespace zapp.tests
  @tags("public", "anaytics")
  @only
  @suite
  class GoogleAnalyticsPluginTests extends tests.BaseTestSuite

    protected override function beforeEach()
      super.beforeEach()
      config = {
        "tracking_id": "#t"
        "user_id": "#u"
      }
      mioc.setInstance("buildConfig", { "app_family_id": "#vid" })
      mioc.setInstance("constants", { "googleAnalyticsClientId": "#c" })

      m.pluginData = new zapp.BasePlugin({ "configuration_json": config, "identifier": "google_analytics_roku" })
      m.plugin = new GoogleAnalyticsPlugin(m.pluginData)
      m.plugin.task = { id: "task" }
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("constructor")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("constructor")
    function _()
      m.plugin.measurementId = "measurementId"
      m.plugin.userId = "user_id"

      m.assertEqual(m.plugin.constants, constants)
      m.assertEqual(m.plugin.buildConfig, buildConfig)
      m.assertEqual(m.plugin.measurementId, "measurement_id")
      m.assertEqual(m.plugin.userId, "user_id")
      m.assertEqual(m.plugin.userId, "user_id")

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("start")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("creates the task")
    function _()

      m.plugin.measurementId = "#m"
      m.plugin.userId = "#u"

      task = { "id": "task" }
      m.expectCalled(m.plugin.createInstance("GoogleAnalytics", invalid, "googleAnalyticsTask") task)
      m.expectCalled(m.plugin.setInstance("googleAnalyticsTask", task))

      m.plugin.start()

      m.assertEqual(m.plugin.task.measurementId, "#m")
      m.assertEqual(m.plugin.task.userId, "#u")
      m.assertEqual(m.plugin.task.control, "run")

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("_identify")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("return true if isEnabled = false")
    function _()
      pluginId = { "id": "pluginId" }
      traits = { "id": "traits" }
      options = { "id": "options" }
      isFromLogout = false
      m.plugin.isEnabled = false

      result = m.plugin._identify(pluginId, traits = {}, options = {}, isFromLogout = false)

      m.assertTrue(result)
    end function

    @it("return true if isTrackingUserIdEnabled = false")
    function _()
      pluginId = { "id": "pluginId" }
      traits = { "id": "traits" }
      options = { "id": "options" }
      isFromLogout = false
      m.plugin.isEnabled = true
      m.plugin.isTrackingUserIdEnabled = false

      result = m.plugin._identify(pluginId, traits = {}, options = {}, isFromLogout = false)

      m.assertTrue(result)
    end function

    @it("return true if accountInfo = invalid and send anonymous user")
    function _()
      pluginId = invalid
      traits = { "id": "traits" }
      options = { "id": "options" }
      isFromLogout = false
      m.plugin.isEnabled = true
      m.plugin.isTrackingUserIdEnabled = true

      m.expectCalled(m.plugin.identifyAsAnonymous())

      result = m.plugin._identify(pluginId, traits = {}, options = {}, isFromLogout = false)

      m.assertTrue(result)
    end function

    @it("call anonymous user analytic")
    function _()
      pluginId = { "id": "pluginId" }
      traits = { "id": "traits" }
      options = { "id": "options" }
      isFromLogout = false
      m.plugin.isEnabled = true
      m.plugin.isTrackingUserIdEnabled = true
      accountInfo = { "id": "" }

      m.expectCalled(m.plugin.getSessionStoreValue(pluginId, "account", true), accountInfo)
      m.expectCalled(m.plugin.identifyAsAnonymous())

      result = m.plugin._identify(pluginId, traits = {}, options = {}, isFromLogout = false)

      m.assertTrue(result)
    end function

    @it("set google userID task ")
    function _()
      pluginId = { "id": "pluginId" }
      traits = { "id": "traits" }
      options = { "id": "options" }
      isFromLogout = false
      m.plugin.isEnabled = true
      m.plugin.isTrackingUserIdEnabled = true
      accountInfo = { "id": "accountInfo" }

      m.expectCalled(m.plugin.getSessionStoreValue(pluginId, "account", true), accountInfo)
      m.expectCalled(m.plugin.setGoogleTaskUserId(accountInfo.id))

      result = m.plugin._identify(pluginId, traits = {}, options = {}, isFromLogout = false)

      m.assertTrue(result)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("identifyAsAnonymous")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("identifies as Anonymous")
    function _()
      m.expectCalled(m.plugin.setGoogleTaskUserId(invalid))

      m.plugin.identifyAsAnonymous()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("_trackVideoEvent")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("track video event ")
    function _()
      event = { "id": "event", "properties": "props" }

      m.expectCalled(m.plugin.processAnalyticsEvent(event))

      m.plugin._trackVideoEvent()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("_processAnalyticsEvent")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("proceed Analytics Event ")
    function _()
      event = { "id": "event", "properties": "props" }

      m.expectCalled(m.plugin.task@.logEvent(event.id, event.properties))

      m.plugin._processAnalyticsEvent()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("is tracking user Id allowed")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("is user id allowed")
    @params("allow-tracking-user-id-for-app-family-aaaa", "aaaa", true)
    @params("allow-tracking-user-id-for-app-family-aaab", "aaaa", false)
    @params("allow-tracking-user-id-for-app-family-aaaa", "aaaac", false)
    function _(userIdString, versionId, expected)

      m.assertEqual(m.plugin.checkIfTrackingUserIdAllowed(userIdString, versionId), expected)

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("trackUserIdAllowedFlag")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("constructor_trackUser")
    @params("allow-tracking-user-id-for-app-family-aaaa", "aaaa", true)
    @params("allow-tracking-user-id-for-app-family-aaac", "aaaa", false)
    @params(invalid, "aaaa", false)
    function _(userID, versionId, result)

      config = {
        "tracking_id": "#t"
        "user_id": userID
      }
      mioc.setInstance("buildConfig", { "app_family_id": versionId })
      mioc.setInstance("constants", {})

      m.pluginData = new zapp.BasePlugin({ "configuration_json": config, "identifier": "google_analytics_roku" })
      m.plugin = new GoogleAnalyticsPlugin(m.pluginData)

      m.assertEqual(m.plugin.isTrackingUserIdEnabled, result)

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("setGoogleTaskUserId")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("valid")
    @params("user123", "user123")
    @params("user 123", "user%20123")
    function _(userID, encodeUserId)
      params = {
        "uid": encodeUserId
      }

      m.plugin.setGoogleTaskUserId(userID)

      m.assertEqual(m.plugin.task.customSessionParams, params)
    end function

    @it("return invalid")
    @params(invalid)
    @params({})
    @params(123)
    function _(userID)
      m.plugin.setGoogleTaskUserId(userID)

      m.assertEqual(m.plugin.task.customSessionParams, invalid)
    end function



  end class
end namespace