import "pkg:/source/analytics/BaseAnalyticsPlugin.bs"
import "pkg:/source/video/analytics/VideoAnalyticsEvent.bs"
import "pkg:/source/video/analytics/VideoAnalyticsEvent.bs"

class GoogleAnalyticsPlugin extends zapp.Analytics.BaseAnalyticsPlugin

  private eventFactory = invalid
  private isTrackingUserIdEnabled = false
  private measurementId = ""
  private userId = ""
  private task as mc.types.node


  public function new(plugin = invalid)
    super("GoogleAnalyticsPlugin", m.getPlugin(plugin))
    'FIXME TEST ME IVAN - constructor tests
    constants = m.getInstance("constants")

    m.measurementId = m.plugin.getStringValue("measurement_id")
    m.userId = m.plugin.getStringValue("user_id")

    buildConfig = m.getInstance("buildConfig")
    versionId = buildConfig.app_family_id
    userIdString = m.plugin.getStringValue("user_id")
    m.isTrackingUserIdEnabled = m.checkIfTrackingUserIdAllowed(userIdString, versionId)
  end function


  private function getPlugin(plugin = invalid)
    if plugin = invalid
      pluginManager = new zapp.PluginManager()
      plugin = pluginManager.getPluginById("google_analytics_roku")
    end if

    return plugin
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ overridden methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public override function start()
    'FIXME TEST ME IVAN
    m.log.info("start")

    m.task = createInstance("GoogleAnalytics", invalid, "googleAnalyticsTask")
    '/* cspell:disable *\
    g.analytics@.initialize({
      measurementId: m.measurementId
      appName: buildConfig.IVAN_FIX_ME
      docLocation: buildConfig.IVAN_FIX_ME
      isFirstOpen: true
      userId: m.userId
    })
    '/* cspell:enable *\
    g.analytics@.start()

    m.setInstance("googleAnalyticsTask", m.task)
  end function

  protected override function _identify(pluginId, traits = {}, options = {}, isFromLogout = false) as boolean
    m.log.info("identify", pluginId)

    if m.isEnabled

      if m.isTrackingUserIdEnabled <> true
        m.log.info("tracking user is not allowed skip isIdentified")
        return true
      end if

      if pluginId <> invalid
        accountInfo = m.getSessionStoreValue(pluginId, "account", true)
      else
        accountInfo = invalid
      end if

      m.log.info("identify accountInfo", accountInfo)

      if accountInfo <> invalid
        if accountInfo.id <> invalid and accountInfo.id.trim() <> ""
          m.log.info("identifying analytics with the userId", accountInfo.id, "for plugin:", pluginId)
          m.log.info("recrating GoogleAnalyticsTask with the userId", accountInfo.id, "for plugin:", pluginId)
          'FIXME TEST ME IVAN
          'FIXME - Ivan - this has changed name in the task setUserId
          m.setGoogleTaskUserId(accountInfo.id)
        else
          m.log.error("identify called; but there id was empty!")
          m.identifyAsAnonymous()
        end if
      else
        m.log.warn("identify called; but there is no logged in user; point to unidentify, to get anonymous analytics")
        m.identifyAsAnonymous()
      end if
    end if

    return true
  end function

  private function identifyAsAnonymous()
    m.log.info("identifying as anonymous user")
    'FIXME TEST ME IVAN
    'FIXME - Ivan - this has changed name in the task setUserId
    m.setGoogleTaskUserId(invalid)
  end function

  protected override function _trackVideoEvent(event as zapp.video.VideoAnalyticsEvent)
    'FIXME TEST ME IVAN
    m.processAnalyticsEvent(event)
  end function

  protected function _processAnalyticsEvent(event as zapp.analytics.AnalyticsEvent)
    'FIXME TEST ME IVAN
    m.task@.logEvent(event.id, event.properties)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function checkIfTrackingUserIdAllowed(userIdString, versionId)

    prefix = "allow-tracking-user-id-for-app-family-"
    suffix = versionId
    s = userIdString

    if mc.isString(s) and mc.isString(prefix) and mc.isString(suffix)
      if prefix + suffix = s
        return true
      end if
    end if

    return false
  end function

  private function setGoogleTaskUserId(userId)
    if mc.isString(userId)
      m.task.customSessionParams = {
        "uid": Box(userId).Escape()
      }
    else
      m.task.customSessionParams = invalid
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Advanced Analytics Support
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function padString(s as string, width as integer, c as string)
    result = s.trim()

    ' don't get stuck in a while loop if pad characters are empty
    if c = "" return result

    while result.len() < width
      difference = width - result.len()
      result = right(c, difference) + result
    end while
    return result
  end function

  private function timeFormat(length as dynamic) as string
    if type(length) = "roFloat" or type(length) = "Double" then length = Int(length)
    if type(length) = "Integer" or type(length) = "roInteger"
      hours = length \ 3600
      minutes = (length mod 3600) \ 60
      seconds = length mod 60
      result = m.padString(stri(hours), 2, "0") + ":" + m.padString(stri(minutes), 2, "0") + ":" + m.padString(stri(seconds), 2, "0")
      return result
    else
      return ""
    end if
  end function

  private function propertiesToLabel(properties)
    if type(properties) <> "roAssociativeArray" then return ""

    label = ""
    sortedKeys = properties.keys()
    for i = 0 to sortedKeys.count() - 1
      ' be careful only to include string values here. Necessary conversions should happen in the public methods
      value = properties[sortedKeys[i]]
      if mc.isString(value)
        value = value.toStr()
      end if

      if i > 0
        label = label + ";"
      end if
      label += `${sortedKeys[i]}=${value}`
    end for
    return label
  end function

  public function booleanString(tf)
    if tf
      return "True"
    else
      return "False"
    end if
  end function

end class