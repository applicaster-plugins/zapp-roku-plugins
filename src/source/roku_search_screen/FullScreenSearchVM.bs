import "pkg:/source/lib/ViewUtils.bs"
import "pkg:/source/roku_modules/maestro/core/Utils.brs"
import "pkg:/source/UIBuilder/view/ComponentVM.bs"
import "pkg:/source/zapp-controls/CollectionRowUtils.bs"

class FullScreenSearchVM extends zapp.uib.ComponentVM

  public currentScreen = invalid

  'styles
  public menuButtons = []
  public menuStyle = {}
  public menuPosition = [960, 584]
  public jumpToIndex = -1
  public isShowingScreenOnFocus = true
  public buttonAlign = "center"
  public infoStatus = ""
  public clippingRect = [0, 0, 0, 0]
  public contentClippingRect = [0, 0, 1920, 1080]
  public menuScrollPosition = [0, 0]
  public buttonHeight = 100
  public buttonWidth = 100
  public visible = false
  public layoutDirection = "horiz"
  public isFilterVisible = false
  public jumpSelectToIndex = 0


  public results = invalid
  public isGridVisible = false
  public isScreenContainerVisible = false
  public screenContainerTranslation = [0, 0]
  public isNoSearchLabelVisible = false
  public isNotFoundLabelVisible = false

  public keyboardStyle = {}
  public gridStyle = {}

  public jumpToItem = 0
  public searchText = ""

  private isFirstLoadComplete = false
  private fallbackScreen = invalid
  private searchDelayTask = invalid
  private loadNextOffset = 2
  private isPaginationSupported = true
  private isMoreAvailable = false
  private loadMoreTask = invalid
  private numItems = 0
  private numRows = 0
  private numCols = 4
  private nextUrl = invalid
  private minCharacters = 3
  private searchQueryName = "q"
  private isShowingContent = false
  private direction = 1
  private lastRowIndex = -1
  private rowTarget = invalid
  private nameOfParentScreen = ""
  private searchData = ""
  private filterData = ""

  private isSearchFilterEnabled = false
  private textTransform = "uppercase"
  private selectedFilterIndex = 0
  private isFilterFocusable = false

  public function new(riversJson)
    super(riversJson, "FullScreenSearchVM")
    m.focusId = "keyboard"
    m.processStyles(riversJson.styles)
    m.processTabStyles(riversJson.styles)
    m.setGridVisible(false)
    m.setScreenContainerVisible(true)

    m.searchData = asAA(riversJson.data.search_source)
    m.filterData = asAA(riversJson.data.filter_source)
    m.rowTarget = riversJson.data.target
    m.fallbackScreen = asString(riversJson.general.fallback)
    m.isSearchFilterEnabled = zapp.viewUtils.getUIBBool(riversJson.general, "enable_search_filters", false)

    if zapp.viewUtils.getUIBBool(riversJson.styles, "override_target_screen", false)
      m.rowTarget = mc.getPath(riversJson, "data.target_screen")
      m.log.warn("Using overridden screen name for target!", m.rowTarget)
    end if
  end function

  function processStyles(styles)
    m.loadDepth = zapp.viewUtils.getUIBInt(styles, "data_depth", 0)
    m.gridStyle = m.getGridStyle(styles, m.style)
    m.loadNextOffset = zapp.viewUtils.getUIBInt(styles, "load_next_offset", 2)
    normalColor = zapp.viewUtils.transposeUIBColor(styles.key_color)

    m.keyboardStyle = {
      translation: zapp.viewUtils.makeUIBPosition(styles, "keyboard", 300, 500)
      keyColor: normalColor
      keyboardBitmapUri: zapp.viewUtils.getPosterUri(styles.keyboard_bitmap_uri)
      focusBitmapUri: zapp.viewUtils.getPosterUri(styles.keyboard_focus_bitmap_uri)
      lowerCase: zapp.viewUtils.getUIBBool(styles, "keyboard_lower_case", false)
    }
    m.applyKeyboardPalette(styles, normalColor)

    m.minCharacters = zapp.viewUtils.getUIBInt(styles, "search_min_chars", 3)
    m.searchQueryName = mc.getPath(styles, "search_query_name", "q")
  end function

  function processTabStyles(styles)
    ?"asfasf" styles

    buttonType = "custom"
    if m.buttonAlign = "left"
      buttonType = "customLeft"
    end if
    layoutDirection = asString(styles.tab_bar_direction, "horiz")
    tabBarAligment = asString(styles.tab_bar_alignment, "left")
    isDynamic = asString(styles.tab_bar_display_mode) <> "fixed"
    m.textTransform = asString(styles.text_transform, "uppercase")

    borderUri = zapp.viewUtils.getPosterUri(styles.tab_bar_border_background_url)
    borderSize = zapp.viewUtils.getUIBInt(styles, "tab_bar_border_w")

    title = mc.getPath(styles, "menu_button_text", "")
    menuStyle = zapp.viewUtils.makeUIBButtonStyle(styles, "tab_bar_item", buttonType, title, true)
    menuStyle.layoutDirection = layoutDirection
    menuStyle.horizAlignment = tabBarAligment
    menuStyle.buttonSpacing = zapp.viewUtils.getUIBInt(styles, "tab_bar_gutter")
    menuStyle.barHeight = zapp.viewUtils.getUIBInt(styles, "tab_bar_item_underline_thickness")


    m.menuStyle = menuStyle

    menuGroupStyle = zapp.viewUtils.makeUIBButtonStyle(styles, "tab_bar", buttonType, title, true)
    'labelStyle = zapp.viewUtils.makeUIBLabelStyle(styles, "text_label")

    'layoutGroup.horizAlignment = tabBarAligment

    backgroundPoster = m.getMField("backgroundPoster")

    backgroundPoster.width = menuGroupStyle.width - borderSize
    backgroundPoster.height = menuGroupStyle.height - borderSize
    'backgroundPoster.uri = menuGroupStyle.normal.backgroundurl
    backgroundPoster.blendColor = menuGroupStyle.normal.backgroundcolor
    backgroundPoster.translation = [borderSize, borderSize]

    backgroundBorderPoster = m.getMField("backgroundBorderPoster")
    backgroundBorderPoster.width = menuGroupStyle.width + borderSize
    backgroundBorderPoster.height = menuGroupStyle.height + borderSize
    'backgroundBorderPoster.uri = menuGroupStyle.normal.backgroundBorderUrl
    'backgroundBorderPoster.uri = menuGroupStyle.normal.backgroundurl
    backgroundBorderPoster.blendColor = menuGroupStyle.normal.backgroundbordercolor
    backgroundBorderPoster.translation = menuGroupStyle.translation

    ' "label": "Filters Bar Style",

    ' ++"tab_bar_direction",
    ' ++"tab_bar_display_mode",
    ' +"tab_bar_w",
    ' +"tab_bar_h",
    ' +"tab_bar_alignment",
    ' +"tab_bar_x"
    ' +"tab_bar_y"
    ' +"tab_bar_background_color"
    ' +"tab_bar_background_url"
    ' +"tab_bar_border_color"
    ' +"tab_bar_border_width"
    ' +"tab_bar_border_background_url"
    ' We should add Background over our menu


    ' "label": "Filter Items Style",

    ' "tab_bar_gutter"
    ' "tab_bar_item_size",
    ' "tab_bar_item_w",
    ' "tab_bar_item_alignment",

    ' "label": "Filter Title Style",

    ' "tab_bar_item_enabled"
    ' +"tab_bar_item_color",
    ' +"tab_bar_item_focused_color",
    ' +"tab_bar_item_selected_color",
    ' +"tab_bar_item_focused_selected_color",
    ' +"tab_bar_item_font_name",
    ' +"tab_bar_item_font_size",
    ' +"text_transform",

    ' "label": "Filter Item Style",

    ' "tab_bar_item_underline_color"
    ' "tab_bar_item_underline_focused_color"
    ' "tab_bar_item_underline_selected_color"
    ' "tab_bar_item_underline_focused_selected_color"
    ' + "tab_bar_item_underline_thickness"
    ' "tab_bar_item_underline_background_url"

    ' "tab_bar_item_padding_top"
    ' "tab_bar_item_padding_right"
    ' "tab_bar_item_padding_bottom"
    ' "tab_bar_item_padding_left"
    ' "tab_bar_item_background_color"
    ' "tab_bar_item_focused_background_color"
    ' "tab_bar_item_selected_background_color"
    ' "tab_bar_item_focused_selected_background_color"
    ' "tab_bar_item_border_color"
    ' "tab_bar_item_focused_border_color"
    ' "tab_bar_item_selected_border_color"
    ' "tab_bar_item_focused_selected_border_color"
    ' "tab_bar_item_border_width"
  end function

  function createButtonsWithFeed(entry)
    if asBoolean(entry.isOk)
      data = entry.data
      menuButtons = []
      i = 0
      for each item in data.getChildren(-1, 0)
        id = "item" + str(i).trim()
        text = item.title
        text = zapp.viewUtils.textToTextTransformFormat(text, m.riversJson.styles.text_transform)

        menuButtons.push({
          id: id
          title: item.title
          'target: m.targetScreenId
          entry: item
        })
        i++
      end for
      m.menuButtons = menuButtons
      m.isFilterFocusable = m.menuButtons.count() > 0
      m.appluSearchFilterDefaultState()
    end if
  end function


  private function applyKeyboardPalette(styles, normalColor) as void
    keyboard = m.getMField("keyboard")
    if keyboard = invalid
      m.log.error("keyboard not found")
      return
    end if
    palettes = createObject("roSGNode", "RSGPalette")
    palettes.colors = {
      primaryTextColor: normalColor
      focusColor: zapp.viewUtils.transposeUIBColor(styles.focused_key_color)
    }
    keyboard.keyGrid.palette = palettes
    keyboard.textEditBox.textColor = normalColor
  end function

  private function getGridStyle(styles, cellStyle)
    if cellStyle <> invalid
      style = zapp.collectionRowUtils.getRowListStyle(styles, mc.getAA(m.style, "cell.normal"))
      style.itemSize = style.rowItemSize
      style.itemSpacing = zapp.viewUtils.makeUIBSize(styles, "grid_spacing", 44, 20)
      style["numColumns"] = zapp.viewUtils.getUIBInt(styles, "number_of_cols", 2)
      m.numCols = style["numColumns"]
    else
      style = {}
    end if

    style.translation = zapp.viewUtils.makeUIBPosition(styles, "grid", 900, 500)

    return style
  end function

  private function showFirstScreen()
    screen = m.getScreen(m.fallbackScreen)
    if screen <> invalid
      m.setScreenParent(screen)
      screen.isFirstScreen = true
      m.toggleSubScreen(screen)
    end if
  end function

  private function setScreenParent(screen as mc.types.node)
    parent = screen.getParent()
    m.nameOfParentScreen = asString(parent.name)
  end function


  function toggleSubScreen(screen)
    m.log.method("toggleSubScreen")

    m.unobserveNodeField(m.currentScreen, "state", m.onsubScreenStateChange)

    m.currentScreen = invalid

    if screen <> invalid
      m.currentScreen = screen
      m.onsubScreenStateChange(m.currentScreen.state)
      m.observeNodeField(m.currentScreen, "state", m.onSubScreenStateChange)
    end if

  end function

  private function onSubScreenStateChange(state as string)
    if state = "initialized"
      m.isScreenContainerVisible = true
      m.isNoSearchLabelVisible = false
      m.isNotFoundLabelVisible = false
      m.screenContainerTranslation = m.gridStyle.translation
      m.isGridVisible = false
      m.currentScreen.visible = true
      m.currentScreen.setFocus(true)
      m.isFirstLoadComplete = true
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ overridden
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public override function load()
    m.state = "ready"
    m.isLoading = false
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ callbacks
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function onSelectItem(index)
    m.log.info("onSelecteItem", index)

    item = m.results.getChild(index)

    if item <> invalid and item.itemType <> "placeholder"
      m.log.info("selected item: ", item.id)
      m.executeContentSelection(m.createSelectionFromContent(item, m.results))
      m.isShowingContent = true
    else
      m.log.warn("selected non-selectable item")
    end if

  end function

  public function onFocusRow(index)
    m.log.info("onFocusRow", index)

    if index < m.lastRowIndex
      m.direction = -1
    else if index > m.lastRowIndex
      m.direction = 1
    end if

    m.lastRowIndex = index

    if m.canLoadMore()
      m.log.info("loading more")
      m.loadMore()
    end if
  end function

  public function onSearchTextChange(text)
    m.log.info("text is now", text, "waiting before searching")

    m.searchText = text
    m.cancelWaitTimer(m.searchDelayTask)
    m.cancelTask(m.loadDataTask)

    if len(m.searchText.trim()) >= m.minCharacters
      m.searchDelayTask = m.waitAFrame(m.onSearchDelayComplete, 0.5)
    else
      m.log.verbose("too few chars. ignoring")
      m.setGridVisible(false)
      m.setScreenContainerVisible(true)
      m.isLoading = false
      m.appluSearchFilterDefaultState()
    end if

  end function

  public function onSearchDelayComplete()
    m.log.method("onSearchDelayComplet")
    m.searchDelayTask = invalid
    m.log.verbose("search debounce complete, exeucting search with", m.searchText)
    m.performSearch(m.searchText)
  end function

  public function onSelectedIndexChange(index)
    m.log.info("selected index", index)
    m.selectedFilterIndex = index
    m.screenState.originEntry = asAA(m.menuButtons[m.selectedFilterIndex].entry)

    if len(m.searchText.trim()) >= m.minCharacters
      m.toggleLoadingDataTask(true, { "search": m.searchText.trim().encodeUriComponent() }, m.loadDepth)
    end if
  end function

  public function onFocusIndexChange(index)
    m.log.info("focused index", index, "isShowingScreenOnFocus", m.isShowingScreenOnFocus)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ search api invocation
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function performSearch(text)
    m.log.method("performSearch")

    m.isLoading = true
    m.setGridVisible(true)

    searchText = text.trim().encodeUriComponent()

    m.toggleLoadingDataTask(true, { "search": searchText }, m.loadDepth)

  end function

  public override function toggleLoadingDataTask(isActive, componentValues = invalid, depth = 1)
    m.log.info("toggleLoadingDataTask", isActive)
    m.loadDataTaskTimer = new zapp.DebugTimer("VM.Feed" + m.name)

    if m.loadDataTask <> invalid
      m.cancelTask(m.loadDataTask)
      m.loadDataTask = invalid
    end if

    if isActive
      m.riversJson.data = m.searchData

      if mc.getPath(m.riversJson, "data.source", "").trim() <> ""
        m.loadDataTask = m.executeloadDataTask("componentFeed", m.onFeedResult, componentValues, depth)
      else
        m.log.error("tried to load entry without a link")
        m.onFeedResult({ isOK: false, data: invalid })
      end if
    end if

    m.isLoading = m.loadDataTask <> invalid
  end function

  public override function onFeedResult(result)
    m.log.method("onFeedResult")

    m.toggleLoadingDataTask(false)
    m.isLoading = false
    results = result.data
    if result.isOk and results <> invalid
      m.setContentStyle(results)
      m.nextUrl = zapp.collectionRowUtils.getNextUrl(result.data.json)
      m.numItems = result.data.getChildCount()
      m.numRows = m.numItems / m.numCols
      m.feed = result.data
      m.isMoreAvailable = m.nextUrl <> invalid and m.nextUrl <> ""
      m.isFilterVisible = m.numItems > 0
    else
      results = createObject("roSGNode", "ZPEntry")
    end if

    mc.setOrAddNodeField(results, "target", m.rowTarget)

    m.results = results
    m.jumpToItem = 0
    m.setGridVisible(true)
    m.setScreenContainerVisible(false)
  end function

  private function appluSearchFilterDefaultState()
    m.isFilterVisible = false
    m.jumpSelectToIndex = 0
    m.onSelectedIndexChange(0)
  end function

  private function setScreenContainerVisible(visible)
    if not m.isGridVisible
      m.isScreenContainerVisible = true and m.currentscreen <> invalid and visible
      if m.isScreenContainerVisible
        m.isNoSearchLabelVisible = false
      end if
    else
      m.isScreenContainerVisible = false
    end if

    if not m.isGridVisible and m.focusId = "grid"
      m.setFocusId("keyboard")
      m.isScreenContainerVisible = true and m.currentscreen <> invalid
    end if
  end function

  private function setGridVisible(isGridVisible)
    m.isGridVisible = isGridVisible and m.results.getChildCount() > 0
    m.isNotFoundLabelVisible = isGridVisible and m.results.getChildCount() = 0 and not m.isLoading
    m.isNoSearchLabelVisible = not isGridVisible and not m.isLoading

    if not m.isGridVisible
      m.results = createObject("roSGnode", "ZPEntry")
    end if

    if not m.isGridVisible and m.focusId = "grid"
      m.setFocusId("keyboard")
    end if
  end function

  private function setContentStyle(content)
    m.log.method("setContentStyle")

    if m.style <> invalid
      cellStyle = m.style.cell
      cellStyle.dataMap = m.style.dataMap
      cellStyle.delete("translation")
      mc.setOrAddNodeField(content, "_style", cellStyle)
      mc.setOrAddNodeField(content, "_styleId", m.style.id)
    else
      m.log.error("Cannot set content: there is no cell style set")
    end if

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  'TODO - pagination should move to a utility class
  private function loadMore()
    m.log.method("loadMore")
    m.state = "loading"

    m.loadMoreTask = m.executeloadTaskWithUrl(m.feed.id, m.onLoadMoreResponse, m.nextUrl, 0)
  end function

  private function onLoadMoreResponse(result)
    m.log.method("onLoadMoreResponse")

    if result.isOk
      m.setContentStyle(result.data)
      m.nextUrl = zapp.collectionRowUtils.getNextUrl(result.data.json)
      m.isMoreAvailable = m.nextUrl <> invalid and m.nextUrl <> ""
      m.numItems += result.data.getChildCount()
      m.numRows = m.numItems / m.numCols
      m.results.appendChildren(result.data.getChildren(-1, 0))
    end if
    m.state = "ready"
  end function

  private function canLoadMore()
    return m.results <> invalid and m.isPaginationSupported and m.direction = 1 and m.isMoreAvailable and m.state <> "loading" and m.lastRowIndex > m.numRows - m.loadNextOffset
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ keyboard
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function onKeyPressRight() as boolean
    if m.focusId = "keyboard"
      if m.isGridVisible
        m.setFocusId("grid")
        return true
      else if m.isScreenContainerVisible
        m.setFocusId("screenContainer")
        return true
      end if
    end if

    return false
  end function

  function onKeyPressUp() as boolean
    if m.isFilterFocusable and m.focusId = "grid"
      m.setFocusId("menu")
      return true
    end if
    return false
  end function

  function onKeyPressDown() as boolean
    if m.focusId = "menu"
      m.setFocusId("grid")
      return true
    end if
    return false
  end function

  function onKeyPressLeft() as boolean
    if m.focusId = "grid" or m.focusId = "screenContainer" or m.focusId = "menu"
      m.setFocusId("keyboard")
      return true
    end if

    return false
  end function

  function isCapturingAnyKeyPress(key as string, press as boolean) as boolean
    if m.focusId = "menu" and key = "down"
      m.setFocusId("keyboard")
    else if key = "left"
      return m.onKeyPressLeft()
    else if key = "right"
      return m.onKeyPressRight()
    end if

    return false
  end function

  override function reset()
    m.jumpToItem = 0
    m.results = createObject("roSGNode", "ZPEntry")
    m.setGridVisible(false)
    m.setScreenContainerVisible(true)
    m.searchText = ""
    m.appluSearchFilterDefaultState()

    if m.isSearchFilterEnabled
      m.riversJson.data = m.filterData
      m.executeloadDataTask("componentFeed", m.createButtonsWithFeed, invalid, 0)
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ lifecycle
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onHide()
    super.onHide()

    m.cancelWaitTimer(m.searchDelayTask)
    m.cancelTask(m.loadDataTask)
    m.loadDataTask = invalid
    m.searchDelayTask = invalid
  end function

  protected override function onShow() as void
    m.log.method("onShow")
    m.trackScreen()
    if not m.isShowingContent
      m.reset()
    end if

    if m.isFirstLoadComplete
      m.log.info("search fallbackScreen already loaded")
    else
      m.showFirstScreen()
    end if

    m.isShowingContent = false
  end function

end class
