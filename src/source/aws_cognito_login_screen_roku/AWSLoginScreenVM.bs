import "pkg:/source/UIBuilder/view/ScreenVM.bs"
import "pkg:/source/lib/ViewUtils.bs"
import "pkg:/source/mixin/KeyboardDialogMixin.bs"

class AWSLoginScreenVM extends zapp.uib.ScreenVM

  'styles
  public titleStyle = invalid
  public descriptionStyle = invalid
  public optional1Style = invalid
  public optional2Style = invalid
  public inputStyle = invalid
  public loginButtonStyle = invalid
  public errorStyle = invalid
  public logoPosition = [100, 33]
  public logoWidth = 350
  public logoHeight = 100
  public logoImageUrl = ""
  public backgroundUrl = ""

  public isCredsValid = false
  public isLoginButtonEnabled = false
  public isRefreshing = true
  public usernameButtonType = "textInput"
  public passwordButtonType = "textInput"

  public usernameText = ""
  public username = ""
  public passwordText = ""
  public password = ""

  public errorText = ""
  public isErrorShowing = false
  public usernamePlaceholderText = ""
  public passwordPlaceholderText = ""
  public backgroundColor = "#000000ff"

  private authTask
  'mixin keyboard
  private showKeyboardDialog = zapp.keyboardDialogMixin.showKeyboardDialog
  private _onKeyboardDialogButtonSelected = zapp.keyboardDialogMixin.onKeyboardDialogButtonSelected
  private _closeKeyboardDialog = zapp.keyboardDialogMixin.closeKeyboardDialog

  public function new(riversJson)
    super(riversJson, "AWSLoginScreenVM")
    m.focusId = "usernameInput"
    m.processStyles(m.riversJson.styles)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Overridden
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public override function createContent()
    m.log.info("createContent is overridden in this screen")
  end function

  public override function load(doNotLoadIfReady = false) as boolean
    m.log.info("load - refreshing login")
    m.refreshLogin()
    return true
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ styles
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function processStyles(styles)
    m.log.info("converting rivers json styles into a format our UI controls can consume")

    m.titleStyle = zapp.viewUtils.makeUIBTextStyle(styles, "title")
    m.descriptionStyle = zapp.viewUtils.makeUIBTextStyle(styles, "description")
    m.optional1Style = zapp.viewUtils.makeUIBTextStyle(styles, "optional_text1")
    m.optional2Style = zapp.viewUtils.makeUIBTextStyle(styles, "optional_text2")
    m.errorStyle = zapp.viewUtils.makeUIBTextStyle(styles, "error")

    m.usernameText = styles.username_placeholder_text
    m.usernamePlaceholderText = m.usernameText

    m.passwordText = styles.password_placeholder_text
    m.passwordPlaceholderText = m.passwordText

    m.backgroundColor = zapp.viewUtils.transposeUIBColor(styles.background_color)
    m.backgroundUrl = styles.background_url
    m.logoImageUrl = styles.logo_url
    m.logoPosition = zapp.viewUtils.makeUIBPosition(styles, "logo", 100, 33)
    logoSize = zapp.viewUtils.makeUIBSize(styles, "logo", 350, 100)
    m.logoWidth = logoSize[0]
    m.logoHeight = logoSize[1]


    inputStyle = zapp.viewUtils.makeUIBButtonStyle(styles, "general_input", "textInputPlaceholder")

    m.inputStyle = inputStyle

    m.loginButtonStyle = zapp.viewUtils.makeUIBButtonStyle(styles, "login_button", "custom", styles.login_button_text)

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ callbacks
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function onLoginButtonSelected(value)
    m.log.method("onLoginButtonSelected")

    if not m.isLoading and m.isCredsValid
      m.processLogin()
    else if not m.isCredsValid
      m.errorText = "Please enter your email address and password"
      m.isErrorShowing = true
    else
      m.log.warn("ignoring loging button, while loading")
    end if
  end function

  public function onUsernameButtonSelected(value)
    m.showKeyboardDialog("Enter your username", m.username, "onUsernameKeyboardDialogDismissal", false, "login")
  end function

  public function onPasswordButtonSelected(value)
    m.showKeyboardDialog("Enter your password", m.password, "onPasswordKeyboardDialogDismissal", true)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Keyboard dialog
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onUsernameKeyboardDialogDismissal(text)
    m.log.method("onKeyboardDialogDismissal")

    if text.trim() = ""
      m.usernameText = m.usernamePlaceholderText
      m.usernameButtonType = "textInputPlaceholder"
      m.username = ""
      m.usernameText = m.usernamePlaceholderText
    else
      m.usernameText = text
      'set the username to lower case letters
      lCaseUserName = LCase(text)
      m.username = lCaseUserName
      m.usernameButtonType = "textInput"
    end if

    m.checkCredsValid()

  end function

  private function onPasswordKeyboardDialogDismissal(text)
    m.log.method("onPasswordKeyboardDialogDismissal")

    if text.trim() = ""
      m.passwordText = m.passwordPlaceholderText
      m.password = ""
      m.passwordButtonType = "textInputPlaceholder"
      m.passwordText = m.passwordPlaceholderText
    else
      m.passwordText = zapp.keyboardDialogMixin.getHiddenPasswordText(text)
      m.password = text
      m.passwordButtonType = "textInput"
    end if

    m.checkCredsValid()
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ refresh
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function refreshLogin()
    m.log.info("calling authTask to refresh login")

    m.authTask = m.createAuthTask("execLoad", "aws_cognito_auth_plugin", m.onRefreshComplete)

    m.isRefreshing = true
    m.isLoginButtonEnabled = false
  end function

  private function onRefreshComplete(result)
    m.log.method("onRefreshComplete", result)
    m.isLoading = false

    if m.getInstance("user").isLoggedIn
      m.dismiss("success")
    else
      m.isRefreshing = false
      m.signalAppLaunchDialog(false)
    end if

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ login
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function checkCredsValid()
    m.isCredsValid = m.username <> invalid and m.username.trim() <> "" and m.password <> invalid and m.password.trim() <> ""

    m.isLoginButtonEnabled = m.isCredsValid and not m.isLoading
  end function

  public function processLogin()
    m.log.info("logging in")

    if m.isCredsValid
      creds = m.createInstance("AuthenticationCredentials")
      creds.username = m.userName
      creds.password = m.password
      m.authTask = m.createAuthTask("execLogIn", "aws_cognito_auth_plugin", m.onLoginComplete, creds)

      m.isLoginButtonEnabled = false

      m.isLoading = true
      m.errorText = ""
      m.isErrorShowing = false
      m.state = "loading"
    end if
  end function

  public function onLoginComplete(result)
    m.log.method("onLoginComplete", result)

    if result <> invalid and result.state = "valid"
      m.log.info("logged in succesfull")
      m.signalAppLaunchDialog(true)
      m.dismiss("success")
    else
      m.state = "ready"
      if result <> invalid and result.message <> invalid
        m.errorText = result.message
      else
        m.errorText = "Unknown error"
      end if
      m.isErrorShowing = true
      m.isLoginButtonEnabled = true
    end if

    m.isLoading = false

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ launch support
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  override function sendLaunchBeacon()
    'we handle this manually
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Handling
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function isCapturingAnyKeyPress(key, press)
    'do not anyone escape this screen!
    if press and key = "back" and not mc.getPath(m.riversJson, "general.isflowBlocker", true)
      return false
    else
      return true
    end if
  end function

  public function onKeyPressBack() as boolean
    isDismissable = m.getTopField("isDismissable")
    m.log.method("onKeyPressBack", m.focusId, isDismissable)

    if m.focusId = "usernameInput"
      if isDismissable = true
        m.dismiss("cancel")
        return true
      else
        m.exitApp(invalid, true)
        return true
      end if
    else
      return m.onKeyPressUp()
    end if
  end function

  public function onKeyPressRight() as boolean

    if m.focusId = "loginButton" and m.riversJson.styles.debug_skip_on_right = true
      m.log.warn("skipping debug flag is on")
      m.onLoginComplete(true)
    end if

    return false
  end function

  public function onKeyPressDown() as boolean
    m.log.method("onKeyPressDown", m.focusId)

    if m.focusId = "usernameInput"
      m.focusId = "passwordInput"
    else if m.focusId = "passwordInput"
      m.focusId = "loginButton"
    end if

    return true
  end function

  public function onKeyPressOptions() as boolean
    m.log.method("onKeyPressOptions", m.focusId)

    m.onUsernameKeyboardDialogDismissal(m.riversJson.styles.debug_username)
    m.onPasswordKeyboardDialogDismissal(m.riversJson.styles.debug_password)

    return true
  end function

  public override function onKeyPressUp() as boolean
    m.log.method("onKeyPressUp", m.focusId)

    if m.focusId = "passwordInput"
      m.focusId = "usernameInput"
    else if m.focusId = "loginButton"
      m.focusId = "passwordInput"
    end if

    return true
  end function

end class