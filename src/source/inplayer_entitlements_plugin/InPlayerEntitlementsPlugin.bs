import "pkg:/source/entitlements/BaseEntitlementsPlugin.bs"
import "pkg:/source/lib/APIUtils.bs"
import "pkg:/source/roku_modules/maestro/core/Collections.brs"

class InPlayerEntitlementsPlugin extends zapp.entitlements.BaseEntitlementsPlugin
  private entitlementsPolicy = ""
  private vodModel = ""

  private date = invalid
  private soonestExpiration = -1
  private pluginInplayerAssetKey = ""

  private assetKey
  private clientId
  private apiUrl

  @inject("authenticationData")
  private authenticationData

  public function new(plugin)
    super("ApplicasterEntitlementsPlugin", plugin)

    m.isItemRequiredToLoadEntitlements = true
    m.requiresLoadToAscertainEntitlements = true

    m.assetKey = plugin.getStringValue("inplayer_custom_asset_key", "")
    m.entitlementsPolicy = plugin.getStringValue("entitlements_policy", "none", m.validPolicies)
    m.vodModel = plugin.getStringValue("vod_model", "AVOD", m.validVodModels)
    m.isUsingRokuStore = m.entitlementspolicy <> "none" and m.entitlementspolicy <> "authOnly"
    m.clientId = plugin.getStringValue("client_id")
    m.pluginInplayerAssetKey = plugin.getStringValue("inplayer_custom_asset_key", invalid)

    m.jwt = m.getSessionStoreValue("inplayer_auth_plugin_roku", "token")

    if plugin.getStringValue("environment", "prod") = "prod"
      m.apiUrl = "https://services.inplayer.com"
    else
      m.apiUrl = "https://staging-v2.inplayer.com"
    end if

  end function

  private function execute(method, endpoint, args = invalid)
    if m.jwt = invalid
      m.log.error("not authenticated with inplayer auth")
      return invalid
    end if

    return m.executeApiRequest(method, endpoint, args)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ overridden
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public override function getPurchasedItemIds(rokuPurchases) as object
    m.log.info("getPurhcasedItemIds")
    result = m.execute("GET", "items/access/customers?status=active")
    ids = []

    collection = mc.getPath(result, "collection")
    if mc.isArray(collection)
      for each receipt in collection
        'have to load the item to get the external_id
        'inplayer say they will improve this, at which point its hould become m.getExternalIDsFromItem
        fee = m.getFeeForAccessReceipt(receipt)
        rokuReceipt = m.getRokuItemForFee(fee, rokuPurchases)
        if rokuReceipt <> invalid
          ids.push(rokuReceipt.code)
        end if
      end for

    else
      errors = mc.getPath(result, "errors", "Unknown error")
      m.log.error("error getting purchased item ids", errors)
    end if

    return ids
  end function

  public override function postPurchases(purchases) as boolean
    'TODO probs want better handling/retry scenarios here in future, like on cleeng plugin
    failedPurchases = m.sendPurchasesToInPlayer(purchases)
    return failedPurchases.count() = 0
  end function

  public override function getAvailableProducts(rokuProducts, purchasedItemIds) as void
    m.log.method("getAvailableProducts")
    'note - available inplayer items are always scoped to an item
    if m.currentItem = invalid or m.jwt = invalid
      m.log.error("these entitlements only work when there is a current selection or user is logged in")
      m.availableProducts.availableProducts = []
      return
    end if

    inPlayerFees = m.getInPlayerFeesForItem(m.currentItem)
    usedProducts = {}
    products = []
    allFeeIds = []
    for each fee in inPlayerFees
      allFeeIds.push(`${fee.id}`)

      rokuProduct = m.getRokuItemForFee(fee, rokuProducts)

      if rokuProduct <> invalid and mc.collections.getArrayIndex(purchasedItemIds, rokuProduct.code) = -1 and usedProducts[rokuProduct.code] = invalid
        rokuProduct.fee = fee
        usedProducts[rokuProduct.code] = true
        products.push(rokuProduct)
      else
        m.log.warn("ignoring fee", fee.id, fee.description, "which can not be mapped to a roku purchase, on item", m.currentItem)
      end if
    end for

    m.availableProducts.availableProducts = products
    m.availableProducts.serviceProductIds = allFeeIds
  end function

  public override function getEntitlements() as dynamic
    entitlements = m.getInstance("entitlements")

    if entitlements = invalid or entitlements.subType() <> "SimpleEntitlements"
      m.log.info("the current IOC registred entitlements object is incompatible with this plugin, creating a new entitlements object")
      entitlements = m.createInstance("SimpleEntitlements", invalid, "entitlements")
      m.setInstance("entitlements", entitlements)
    end if

    entitlements.availableProducts = m.availableProducts
    entitlements.authenticationData = m.authenticationData
    entitlements.policy = m.entitlementsPolicy
    entitlements.vodModel = m.vodModel
    entitlements.requiresLoadToAscertainEntitlements = true
    entitlements@.configure()
    if m.soonestExpiration <> -1
      entitlements.expiryTimeInSeconds = m.soonestExpiration
    end if
    return entitlements
  end function

  public override function loadItem(item) as boolean
    m.log.method("loadItem")
    if item = invalid
      return false
    end if

    if m.jwt = invalid
      errorMessage = "not authenticated with inplayer when retrieving item: " + item.id
      m.log.error(errorMessage, item)
      mc.setOrAddNodeField(item, "errorMessage", errorMessage)
      return false
    end if

    inPlayerId = m.getInplayerId(item)
    if inPlayerId = invalid
      errorMessage = "Could not ascertain inplayer id with item: " + item.id
      m.log.error(errorMessage, item)
      mc.setOrAddNodeField(item, "errorMessage", errorMessage)

      return false
    end if

    result = m.execute("GET", `items/${inPlayerId}/access`)

    content = parseJson(mc.getPath(result, "item.content", "{}"))
    if content <> invalid and content.mobile_url <> invalid and content.mobile_url.trim() <> ""
      if item.originalUrl = invalid
        m.log.info("this item has never been manipulated; storing it's original url")
        mc.setOrAddNodeField(item, "originalUrl", item.url)
      end if
      item.url = content.mobile_url
      if content.cookies <> invalid
        cookieText = "Cookie:"
        cookieText += "CloudFront-Policy=" + mc.getPath(content.cookies, "CloudFront-Policy", "") + "; "
        cookieText += "CloudFront-Signature=" + mc.getPath(content.cookies, "CloudFront-Signature", "") + "; "
        cookieText += "CloudFront-Key-Pair-Id=" + mc.getPath(content.cookies, "CloudFront-Key-Pair-Id", "") + ";"
        item.HttpHeaders = [cookieText]
      end if
      item.isLoaded = true
      return true
    end if

    errorMessage = m.getErrorMessage(result, "Error loading item: " + item.id)
    m.log.error("could not unlock content:", errorMessage)
    mc.setOrAddNodeField(item, "errorMessage", errorMessage)
    return false
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ private impl
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function getErrorMessage(result, defaultMessage)
    if result <> invalid and result.errors <> invalid
      for each id in result.errors
        return result.errors[id]
      end for
    end if
    return defaultMessage
  end function

  ' /**
  '  * @member sendPurchasesToInPlayer
  '  * @memberof module:InplayerEntiltementsPlugin
  '  * @instance
  '  * @function
  '  * @description description
  '  * @param {paramType} paramDescription
  '  * @returns {returnType} returnDescription
  '  */
  private function sendPurchasesToInPlayer(purchases)
    m.log.method("postPurchasesImpl")
    if m.jwt = invalid
      m.log.error("not authenticated with inplayer when sending purchases")
      return []
    end if

    failedPurchases = []

    for each receipt in purchases
      params = {
        receipt: receipt.purchaseId
        product_name: receipt.code
      }
      result = m.execute("FORMPOST", "v2/external-payments/roku/validate", params)

      code = mc.getPath(result, "code", -1)
      'TODO get code for already purchased error and ignore it!
      if code <> 200
        m.log.error("failed to register receipt code:", code, result)
        failedPurchases.push(receipt)
      end if
    end for

    return failedPurchases
  end function

  private function getInPlayerFeesForItem(item) as object
    ids = []
    inPlayerId = m.getInplayerId(item)

    if inPlayerId <> invalid
      result = m.execute("GET", `items/${inPlayerId}/access-fees`)

      if result <> invalid
        for each item in result
          ids.push(item)
        end for
      end if

    else
      m.log.warn("could not ascertain inplayer id with item", item)
    end if

    return ids
  end function

  private function getInplayerId(item)
    if item = invalid
      m.log.error("invalid item")
      return invalid
    end if

    if item.inPlayerId <> invalid
      return item.inPlayerId
    end if

    m.log.info("extensions", item.json.extensions)
    id = mc.getPath(item.json, m.pluginInplayerAssetKey)

    if id = invalid
      id = mc.getPath(item.json, "extensions.inplayer_asset_id")
    end if

    if id = invalid
      assetType = mc.getPath(item.json, "extensions.inplayer_asset_type")
      m.log.info("trying to retrieve inplayer external id with inplayer_asset_type", assetType, "and id", item.id)
      if assetType <> invalid
        result = m.execute("GET", `items/assets/external/${assetType}/${item.id}`)
        id = mc.getPath(result, "id")
      end if
    end if

    if id <> invalid
      mc.setOrAddNodeField(item, "inPlayerId", id)
    else
      m.log.error("could not ascertain inplayer asset id, or succefully retrieve the id based on entry.id and inplayer asset type")
    end if
    return id
  end function

  ' /**
  '  * @member getFeeExternalIdFromServer
  '  * @memberof module:InPlyaerEntitlementsPlugin
  '  * @instance
  '  * @function
  '  * @description unfortunately, we can't get external ids directly from fees so we have to call this function to laod each purchased fee first, and later get it's external id
  '  * @param {assocarray} blob of json for a fee receipt
  '  * @returns {assocarray|invalid} fee, or invalid if no match
  '  */
  private function getFeeForAccessReceipt(feeReceipt)
    feeId = mc.getPath(feeReceipt, "item_id")

    if feeId <> invalid
      result = m.execute("GET", `items/${feeId}/access-fees`)

      if mc.isArray(result)
        for each fee in result
          if fee.id = feeReceipt.purchased_access_fee_id
            return fee
          end if
        end for
      end if
    else
      m.log.error("illegal feeId")
    end if

    return invalid
  end function

  function getRokuItemForFee(fee, rokuItems)
    m.log.info("looking for roku product that maches fee", mc.getPath(fee, "id"))
    m.log.info("==========================================")
    if rokuItems.count() = 0
      m.log.error("there are no available roku products")
      return invalid
    end if
    if fee <> invalid and fee.external_fees <> invalid and fee.external_fees.count() > 0
      for each externalFee in fee.external_fees
        for each rokuItem in rokuItems
          m.log.info("checking if externalFee id", externalFee.external_id, "matches roku code", rokuItem.code)
          if externalFee.external_id = rokuItem.code
            return rokuItem
          end if
        end for
      end for
    else
      m.log.error("fee", mc.getPath(fee, "id"), "has no external_ids configured - it cannot be used")
    end if
    m.log.info("==========================================")

    return invalid
  end function

  private function getExternalIdsFromItem(item, isOnlyGettingFirst = false)
    ids = []

    if item.external_fees <> invalid and item.external_fees.count() > 0
      for each externalFee in item.external_fees
        externalId = mc.getPath(externalFee, "external_id")

        if externalId <> invalid
          ids.push(externalId)
          if isOnlyGettingFirst
            exit for
          end if
        else
          m.log.error("error finding external ids for item", item)
        end if
      end for
    else
      m.log.error("this fee has no external_ids configured")
    end if

    return ids
  end function

end class
