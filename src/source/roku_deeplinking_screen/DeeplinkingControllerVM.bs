import "pkg:/source/UIBuilder/view/ScreenVM.bs"
import "pkg:/source/lib/ViewUtils.bs"

class DeeplinkingControllerVM extends zapp.uib.ScreenVM

  public isLoadingIndicatorVisible = false
  public isHidingContent = true
  public currentScreen = invalid
  private isLiveDeeplink = false
  private isShowingPrehooks = false
  private isShowingParentScreen = false
  private isDeeplinkingApplied = false
  private deeplinkingTask = invalid
  private deeplinkingData = invalid
  private willExitOnShow = false

  public screenIdsByName = {}

  public function new(riversJson)
    super(riversJson, "DeeplinkingControllerVM")
    m.focusId = "screenContainer"
    m.processStyles(riversJson.styles)
  end function

  private function processStyles(styles)
    m.screenIdsByName = {
      "series": mc.getPath(styles, "series_screen")
      "season": mc.getPath(styles, "series_screen")
      "episode": mc.getPath(styles, "episode_screen")
      "detail": mc.getPath(styles, "detail_screen")
    }
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ overridden
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public override function createContent()
  end function

  public override function load() as boolean
    m.log.info("deeplink.load")
    if m.isDeeplinkingApplied
      if not m.isShowingParentScreen
        m.log.info("the screen has appeared again, probably from a video player; but has no parent screen, exiting from deeplinking")
      else
        m.log.info("deeplinking screen is loaded - not loading again")
      end if
      return false
    else
      ' prehookController = m.getPrehookController()

      ' if prehookController <> invalid
      ' m.log.info("this deeplinking screen has a prehookController")
      ' m.togglePrehookController(true, prehookController)
      ' else
      m.log.info("toggling deeplink task")
      args = m.getInstance("deeplinkingArgs")
      m.isLiveDeeplink = args.isLiveDeeplink = true
      m.toggleDeeplinkingTask(true, args)
      ' end if
    end if

    return true
  end function


  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ prehook support
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function togglePrehookController(isActive, controller = invalid)
    m.log.method("togglePrehookController", isActive)
    m.isLoadingIndicatorVisible = false

    m.unobserveNodeField(m.currentScreen, "state", m.onPrehookControllerStateChange)

    if isActive
      m.observeNodeField(controller, "state", m.onPrehookControllerStateChange, "value", true)
      m.currentScreen = controller
    else
      m.currentScreen = invalid
    end if

    m.isShowingPrehooks = m.currentScreen <> invalid
  end function

  private function onPrehookControllerStateChange(state)
    m.log.info("prehook state changed", state)
    m.currentScreen = invalid

    if state = "success"

      m.log.info("prehook successfully finished - playing item")
      args = m.getInstance("deeplinkingArgs")
      m.toggleDeeplinkingTask(true, args)

    else
      m.dismissDeeplinkingController()
    end if
  end function

  ' private function getPrehookController()
  '   m.log.info("getPrehookController")
  '   prehooks = mc.getPath(m.riversJson, "hooks.preload_plugins")

  '   if prehooks <> invalid and prehooks.count() > 0
  '     m.log.info("this deeplink controller has prehooks")
  '     prehookScreen = m.createInstance("ScreenHookController", invalid, "prehooksController")
  '     prehookScreen.hooks = prehooks
  '     prehookScreen.targetScreen = invalid
  '     prehookScreen.isManagingScreensOnCompletion = false
  '     return prehookScreen
  '   else
  '     return invalid
  '   end if

  ' end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Deeplinking data retrieval
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function toggleDeeplinkingTask(isActive, args = invalid)
    m.log.method("toggleDeeplinkingTask", isActive, args)
    m.toggleLoadingIndicator(isActive)

    m.unobserveNodeField(m.deeplinkingTask, "deeplinkingData", m.onDeeplinkingTaskResult)
    m.deeplinkingTask = invalid

    if isActive
      m.log.info("starting deeplinking task")
      m.deeplinkingTask = m.createInstance("DeeplinkingTask", invalid, "deeplinkingTask")
      m.observeNodeField(m.deeplinkingTask, "deeplinkingData", m.onDeeplinkingTaskResult, "value", true)

      m.deeplinkingTask.args = args
      m.deeplinkingTask.control = "run"
    end if
  end function

  public function onDeeplinkingTaskResult(deeplinkingData)
    m.log.method("onDeeplinkingTaskResult deeplinkingData", deeplinkingData)

    m.toggleDeeplinkingTask(false)

    if deeplinkingData.isValid
      m.applyDeeplinking(deeplinkingData)
    else
      m.log.error("deeplinking task did not yield valid deep linking info")
      m.dismissDeeplinkingController()
    end if

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ deeeplinking application
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function applyDeeplinking(deeplinkingData) as void
    m.log.method("applyDeeplinking - app is configured for deeplinking. Navigating to the appropriate view")
    m.deeplinkingData = deeplinkingData
    deeplinkingSelection = m.getDeeplinkingSelectionWithData(deeplinkingData)

    if deeplinkingSelection = invalid
      m.log.error("Deep linking data could not be configured.")
      m.dismissDeeplinkingController()
      return
    end if

    m.log.info("Applying deep link for entry with entry ", mc.dv(deeplinkingData.entry), mc.dv(deeplinkingData.parentEntry))

    m.setInstance("deeplinkingSelection", deeplinkingSelection)


    if deeplinkingData.parentEntry <> invalid
      screen = zapp.uib.mixin.getMappedScreen(deeplinkingData.parentEntry,
      { "originEntry": deeplinkingData.parentEntry, "selection": deeplinkingSelection })

      if screen <> invalid and deeplinkingData.itemType <> "channel"
        m.isShowingParentScreen = m.deeplinkingData.isShowingParentScreen
        m.currentScreen = screen
        m.observeNodeField(screen, "state", m.onScreenStateChange)
        m.toggleNavMenuFocus(false)
        m.onContentStateChange(screen.state)
        m.observeNodeField(screen, "state", m.onContentStateChange)

        m.isDeeplinkingApplied = true
        m.signalAppLaunchComplete()
        if not m.isShowingParentScreen
          m.log.info("not actually showing parent screen - moving fuax focus")
          m.focusId = "logPoster"
        end if
      end if
    else
      m.log.error("could not do deeplinking - exiting")
      m.exitFromDeeplinking()
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ private impl
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  'brute force child finding, which will look in all known components content, to see if the child we want is there
  private function findEntryInVisualNode(node as mc.types.node, id as string) as mc.types.node
    for each child in node.getChildren(-1, 0)
      subType = child.subType()
      if subType = "mv_MarkupGrid" or subType = "mv_RowList"
        entry = m.findEntryInContent(child, id)
        if entry <> invalid
          return entry
        end if
      else
        entry = m.findEntryInVisualNode(child, id)
        if entry <> invalid
          return entry
        end if
      end if
    end for
    return invalid
  end function

  private function findEntryInContent(node as mc.types.node, id as string) as mc.types.node
    entry = invalid
    for each child in node.getChildren(-1, 0)
      if child.subType = "ZPEntry" and child.id = id
        return child
      else
        entry = m.findEntryInContent(child, id)
        if entry <> invalid
          return entry
        end if
      end if
    end for
    return invalid
  end function

  private function onScreenStateChange(state as string)
    if state = "error"
      m.unobserveNodeField(m.currentScreen, "state", m.onScreenStateChange)
      m.log.info("screen entered error state, exiting")
      m.exitFromDeeplinking()
    else if state = "ready"
      if m.isShowingParentScreen
        m.isHidingContent = false
      end if
      if m.deeplinkingData.entryId <> invalid
        m.findAndShowChild()
      end if
    end if
  end function

  private function findAndShowChild()
    childEntry = m.findEntryInContent(m.currentScreen, m.deeplinkingData.entryId)
    if childEntry <> invalid

    end if
  end function

  private function toggleLoadingIndicator(isActive)
    m.isLoadingIndicatorVisible = isActive
  end function

  private function dismissDeeplinkingController()
    m.toggleLoadingIndicator(true)

    if m.isLiveDeeplink or not m.isShowingPrehooks
      m.log.info("going to go back, if possible")
      m.exitFromDeeplinking()
    else
      m.log.info("cannot go back, coz this is an app launch deeplink, with a prehook - it can't be cancelled")
      m.exitApp()
    end if
  end function

  private function getDeeplinkingSelectionWithData(deeplinkingData)
    m.log.method("getDeeplinkingSelectionWithData")

    if deeplinkingData = invalid or deeplinkingData.isValid <> true
      m.log.error("received invalid deeplinkingData")
      return invalid
    end if

    selection = CreateObject("roSGNode", "Selection")

    content = invalid

    if deeplinkingData.entry <> invalid
      content = deeplinkingData.entry.clone(true)
    else if deeplinkingData.parentEntry <> invalid
      content = deeplinkingData.parentEntry.clone(true)
    end if

    if content <> invalid
      selection.currentItem = content
      selection.initialItem = content

      if deeplinkingData.itemType = "series"
        selection.action = "deeplinkSeries"
      else if deeplinkingData.action = "play"
        selection.action = "deeplinkPlay"
      else
        selection.action = "deeplinkDisplay"
      end if

      collection = createObject("roSGNode", "ZPEntry")
      collection.appendChild(content)
      collection.id = content.id
      selection.collection = collection
    end if
    return selection
  end function

  function exitFromDeeplinking()
    m.setInstance("deeplinkingSelection", invalid)
    zapp.appService.exitFromDeeplinking()
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key handling
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function onKeyPressBack() as boolean
    m.log.method("onKeyPressBack")

    m.togglePrehookController(false)
    m.dismissDeeplinkingController()

    return true
  end function

  private function onContentStateChange(state)
    m.log.info("DEEP LINK PARENT SCREEN STATE", state)
    m.toggleLoadingIndicator(state = "loading")
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Lifecycle methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onShow()
    super.onShow()
    m.log.info("onShow - isShowingParentScreen", m.isShowingParentScreen)
    if m.isDeeplinkingApplied and not m.isShowingParentScreen
      m.log.info("the screen has appeared again, probably from a video player; but has no parent screen, exiting from deeplinking")
      m.exitFromDeeplinking()
    end if
  end function

end class