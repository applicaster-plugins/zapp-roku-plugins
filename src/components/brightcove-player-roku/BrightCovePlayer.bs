import "pkg:/source/brightcove-player-roku/BrightCovePlayerVM.bs"

function init()
  m.top.observeField("control", "onControlChange")
end function

function onControlChange()
  m.log.info("onControlChange", m.top.control)

  if m.top.control = "play"
    m.vm.player.callFunc(m.vm.playerFunctions.PLAY, invalid)
  end if

end function

function initialize(args)
  m.log.info("initialize")
  createVM()
end function

function createVM()
  m.log.method("createVM")

  m.vm = new BrightCovePlayerVM(m.top)
  m.vm.initialize()

  mx.initializeBindings()
end function

function _applyStyle(styles, localizations, assets)
end function

function playItem(item, playMode = "default")
  if item.playMode = "inline"
    item = setUrlForInlineMode(item)
  end if
  m.vm.playItem(item, playMode)
end function

function setUrlForInlineMode(item)
  itemJson = item.json
  if asString(itemJson.content.teaser, invalid) <> invalid
    mc.setOrAddNodeField(item, "URL", itemJson.content.teaser)
  else if asString(itemJson.extensions.preview_playback, invalid) <> invalid
    mc.setOrAddNodeField(item, "URL", itemJson.extensions.preview_playback)
  end if
  mc.setOrAddNodeField(item, "TITLE", "")
  mc.setOrAddNodeField(item, "STREAMFORMAT", "")
  return item
end function

function setInlineView(targetView, isFullScreen, isMuted)
  'targetView.appendChild(m.videoNode)
  if m.top <> invalid
    m.top.videoPlayerHeight = targetView.height
    m.top.videoPlayerWidth = targetView.width
  end if
end function

function stopItem(navBarFocused = false)
  if navBarFocused
    m.vm.stopItem()
  end if
end function

function onGainedFocus(isSelfFocused)
  if isSelfFocused
    if m.vm.player <> invalid
      m.vm.player.setFocus(true)
    end if
  end if
end function